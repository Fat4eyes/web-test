{"version":3,"sources":["knockout.multiselect.js","lecturers.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"manager-lecturers.js","sourcesContent":["var multiselectVM = function(params){\n    var self = this;\n\n    var _text = params.textField ? params.textField : \"name\";\n    var _value = params.valueField ? params.valueField: \"id\";\n    var _source = params.source;\n    self.tags = params.tags;\n    self.ddwidth = ko.observable('500px');\n    self.query = ko.observable('');\n    self.visible = ko.observable(false);\n    self.data = ko.pureComputed(function(){\n        var filtered = [];\n        var query = new RegExp(self.query().toLowerCase());\n        $.each(_source(), function(i, item){\n            if (query.test(item[_text]().toLowerCase())\n                && $.inArray(item, self.tags()) < 0){\n                filtered.push(item);\n            }\n        });\n        return filtered;\n    });\n\n    var refillTags = function(){\n        var tags = [];\n        if(!self.tags().length) return;\n        $.each(_source(), function(i, sourceItem){\n            $.each(self.tags(), function(j, tagItem){\n                if (tagItem[_value]() === sourceItem[_value]()){\n                    tags.push(sourceItem);\n                }\n            });\n        });\n        self.tags(tags);\n    }();\n\n    self.text = function(item){\n        return item[_text]();\n    };\n    self.select = function(data){\n        self.query('');\n        self.hide();\n        if ($.inArray(data, self.tags()) < 0){\n            self.tags.push(data);\n        }\n    };\n    self.remove = function(data){\n        self.tags.remove(data);\n        self.hide();\n    };\n    self.show = function(){\n        self.visible(true);\n    };\n    self.hide = function(){\n        self.visible(false);\n    };\n    self.leave = function(){\n        setTimeout(self.hide, 100);\n    };\n    self.visible.subscribe(function(visible){\n        if (!visible) return;\n        self.ddwidth($('.knockout-multiselect').width());\n    });\n};\n\nko.components.register('multiselect', {\n    viewModel: {\n        createViewModel: function(params) {\n            return new multiselectVM(params);\n        }\n    },\n    template: '<div class=\"multiselect-wrap knockout-multiselect\">' +\n    '<!-- ko if: tags().length --> ' +\n    '<div class=\"multiselect\"> ' +\n    '<ul data-bind=\"foreach: tags\"> ' +\n    '<li> ' +\n    '<span data-bind=\"click: $parent.remove\" class=\"fa\">&#xf00d;</span> ' +\n    '<span data-bind=\"text: $parent.text($data)\"></span> ' +\n    '</li> ' +\n    '</ul> ' +\n    '</div> ' +\n    '<!-- /ko --> ' +\n    '<input placeholder=\"Начните вводить\"' +\n    'data-bind=\"textInput: query,event: {focusin: show, focusout: leave},css: {full: tags().length}\"/> ' +\n    '</div> ' +\n    '<!-- ko if: data().length -->' +\n    '<div class=\"multiselect-list\" data-bind=\"foreach: data, visible: visible, style: {width: ddwidth}\">' +\n    '<div class=\"exact-item\" data-bind=\"text: $parent.text($data), click: $parent.select\"></div>' +\n    '</div>' +\n    '<!-- /ko -->'\n});","$(document).ready(function(){\n    var studentsViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self,{\n                page: menu.admin.lecturers,\n                pagination: 15,\n                mode: true,\n                multiselect: true\n            });\n\n            self.initial = {\n                disciplines: ko.observableArray([])\n            };\n            self.current = {\n                lecturers: ko.observableArray([]),\n                lecturer: ko.validatedObservable({\n                    id: ko.observable(''),\n                    firstname: ko.observable('').extend({\n                        required: true,\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    lastname: ko.observable('').extend({\n                        required: true,\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    patronymic: ko.observable('').extend({\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    email: ko.observable('').extend({required: true, email: true}),\n                    password: ko.observable().extend({\n                        required: true,\n                        minLength: 6,\n                        maxLength: 16\n                    })\n                }),\n                disciplines: ko.observableArray([]),\n                password: ko.validatedObservable(null).extend({\n                    required: {\n                        params: true,\n                        message: 'Вы не можете оставить это поле путым'\n                    },\n                    minLength: 6,\n                    maxLength: 16\n                })\n            };\n\n            self.filter = {\n                name: ko.observable(''),\n                clear: function(){\n                    self.filter.name('');\n                }\n            };\n            self.actions = {\n                show: function(data){\n                    if (self.mode() === state.none || self.current.lecturer().id() !== data.lecturer.id()){\n                        self.alter.fill(data.lecturer);\n                        self.current.disciplines(data.disciplines());\n                        self.multiselect.tags(data.disciplines());\n                        self.mode(state.info);\n                        return;\n                    }\n                    self.actions.cancel();\n                },\n                start: {\n                    create: function(){\n                        self.mode() === state.create\n                            ? self.mode(state.none)\n                            : self.mode(state.create);\n                        self.alter.empty();\n                        self.current.disciplines([]);\n                        self.multiselect.tags([]);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    update: function(){\n                        self.mode(state.update);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    remove: function(){\n                        commonHelper.modal.open('#remove-request-modal');\n                    }\n                },\n                end: {\n                    update: function(){\n                        self.current.lecturer.isValid()\n                            ? self.post.lecturer()\n                            : self.validation[$('[accept-validation]').attr('id')].open();\n                    },\n                    remove: function(){\n                        self.post.removal();\n                    }\n                },\n                cancel: function(){\n                    self.mode(state.none);\n                    self.alter.empty();\n                    self.current.disciplines([]);\n                    self.current.password(null);\n                },\n                password: {\n                    change: function(){\n                        commonHelper.modal.open('#change-password-modal');\n                    },\n                    cancel: function(){\n                        self.current.password(null);\n                        self.validation[$('.box-modal [validate]').attr('id')].close();\n                        commonHelper.modal.close('#change-password-modal');\n                    },\n                    approve: function(){\n                        self.current.password.isValid()\n                            ? self.post.password()\n                            : self.validation[$('.box-modal [validate]').attr('id')].open();\n                    }\n                }\n            };\n\n            self.alter = {\n                stringify: {\n                    lecturer: function(){\n                        var lecturer = ko.mapping.toJS(self.current.lecturer);\n\n                        self.mode() === state.create\n                            ? delete lecturer.id\n                            : delete lecturer.password;\n\n                        return JSON.stringify({\n                            lecturer: lecturer,\n                            disciplineIds: self.multiselect.tagIds.call(self)\n                        });\n                    },\n                    password: function(){\n                        return JSON.stringify({\n                            userId: self.current.lecturer().id(),\n                            password: self.current.password()\n                        });\n                    }\n                },\n                fill: function(data){\n                    self.current.lecturer()\n                        .id(data.id()).email(data.email())\n                        .firstname(data.firstname())\n                        .lastname(data.lastname())\n                        .patronymic(data.patronymic())\n                        .password('password');\n                },\n                empty: function(){\n                    self.current.lecturer()\n                        .id('').email('').password('')\n                        .firstname('').lastname('').patronymic('');\n                }\n            };\n            self.get = {\n                lecturers: function(){\n                    var name = self.filter.name() ? '&name=' + self.filter.name() : '';\n                    var url = '/api/lecturers/show' +\n                            '?page=' + self.pagination.currentPage() +\n                            '&pageSize=' + self.pagination.pageSize() + name;\n\n                    $ajaxget({\n                        url: url,\n                        errors: self.errors,\n                        successCallback: function (data) {\n                            self.current.lecturers(data.data());\n                            self.pagination.itemsCount(data.count());\n                        }\n                    });\n                },\n                disciplines: function(){\n                    $ajaxget({\n                        url: '/api/disciplines/',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.initial.disciplines(data());\n                            self.multiselect.data(data());\n                        }\n                    });\n                }\n            };\n            self.post = {\n                password: function(){\n                    var json = self.alter.stringify.password();\n                    $post('/api/user/setPassword', json, self.errors, function(){\n                        self.actions.password.cancel();\n                        self.inform.show({\n                            message: 'Пароль успешно изменен'\n                        });\n                    })();\n                },\n                removal: function(){\n                    var requestOptions = {\n                        url: '/api/lecturers/delete/' + self.current.lecturer().id(),\n                        data: null,\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.get.lecturers();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                },\n                lecturer: function(){\n                    var requestOptions = {\n                        url: self.mode() === state.create ? '/api/lecturers/create' : '/api/lecturers/update',\n                        errors: self.errors,\n                        data: self.alter.stringify.lecturer(),\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.lecturers();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                }\n            };\n\n            self.filter.name.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.lecturers();\n            });\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.get.lecturers();\n            });\n\n            self.get.disciplines();\n            self.get.lecturers();\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(studentsViewModel());\n});"]}