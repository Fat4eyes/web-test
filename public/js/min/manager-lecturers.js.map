{"version":3,"sources":["knockout.multiselect.js","lecturers.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"manager-lecturers.js","sourcesContent":["var multiselectVM = function(params){\r\n    var self = this;\r\n\r\n    var _text = params.textField ? params.textField : \"name\";\r\n    var _value = params.valueField ? params.valueField: \"id\";\r\n    var _source = params.source;\r\n    self.tags = params.tags;\r\n    self.ddwidth = ko.observable('500px');\r\n    self.query = ko.observable('');\r\n    self.visible = ko.observable(false);\r\n    self.data = ko.pureComputed(function(){\r\n        var filtered = [];\r\n        var query = new RegExp(self.query().toLowerCase());\r\n        $.each(_source(), function(i, item){\r\n            if (query.test(item[_text]().toLowerCase())\r\n                && $.inArray(item, self.tags()) < 0){\r\n                filtered.push(item);\r\n            }\r\n        });\r\n        return filtered;\r\n    });\r\n\r\n    var refillTags = function(){\r\n        var tags = [];\r\n        if(!self.tags().length) return;\r\n        $.each(_source(), function(i, sourceItem){\r\n            $.each(self.tags(), function(j, tagItem){\r\n                if (tagItem[_value]() === sourceItem[_value]()){\r\n                    tags.push(sourceItem);\r\n                }\r\n            });\r\n        });\r\n        self.tags(tags);\r\n    }();\r\n\r\n    self.text = function(item){\r\n        return item[_text]();\r\n    };\r\n    self.select = function(data){\r\n        self.query('');\r\n        self.hide();\r\n        if ($.inArray(data, self.tags()) < 0){\r\n            self.tags.push(data);\r\n        }\r\n    };\r\n    self.remove = function(data){\r\n        self.tags.remove(data);\r\n        self.hide();\r\n    };\r\n    self.show = function(){\r\n        self.visible(true);\r\n    };\r\n    self.hide = function(){\r\n        self.visible(false);\r\n    };\r\n    self.leave = function(){\r\n        setTimeout(self.hide, 100);\r\n    };\r\n    self.visible.subscribe(function(visible){\r\n        if (!visible) return;\r\n        self.ddwidth($('.knockout-multiselect').width());\r\n    });\r\n};\r\n\r\nko.components.register('multiselect', {\r\n    viewModel: {\r\n        createViewModel: function(params) {\r\n            return new multiselectVM(params);\r\n        }\r\n    },\r\n    template: '<div class=\"multiselect-wrap knockout-multiselect\">' +\r\n    '<!-- ko if: tags().length --> ' +\r\n    '<div class=\"multiselect\"> ' +\r\n    '<ul data-bind=\"foreach: tags\"> ' +\r\n    '<li> ' +\r\n    '<span data-bind=\"click: $parent.remove\" class=\"fa\">&#xf00d;</span> ' +\r\n    '<span data-bind=\"text: $parent.text($data)\"></span> ' +\r\n    '</li> ' +\r\n    '</ul> ' +\r\n    '</div> ' +\r\n    '<!-- /ko --> ' +\r\n    '<input placeholder=\"Начните вводить\"' +\r\n    'data-bind=\"textInput: query,event: {focusin: show, focusout: leave},css: {full: tags().length}\"/> ' +\r\n    '</div> ' +\r\n    '<!-- ko if: data().length -->' +\r\n    '<div class=\"multiselect-list\" data-bind=\"foreach: data, visible: visible, style: {width: ddwidth}\">' +\r\n    '<div class=\"exact-item\" data-bind=\"text: $parent.text($data), click: $parent.select\"></div>' +\r\n    '</div>' +\r\n    '<!-- /ko -->'\r\n});","$(document).ready(function(){\r\n    var studentsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self,{\r\n                page: menu.admin.lecturers,\r\n                pagination: 15,\r\n                mode: true,\r\n                multiselect: true\r\n            });\r\n\r\n            self.initial = {\r\n                disciplines: ko.observableArray([])\r\n            };\r\n            self.current = {\r\n                lecturers: ko.observableArray([]),\r\n                lecturer: ko.validatedObservable({\r\n                    id: ko.observable(''),\r\n                    firstname: ko.observable('').extend({\r\n                        required: true,\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    lastname: ko.observable('').extend({\r\n                        required: true,\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    patronymic: ko.observable('').extend({\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    email: ko.observable('').extend({required: true, email: true}),\r\n                    password: ko.observable().extend({\r\n                        required: true,\r\n                        minLength: 6,\r\n                        maxLength: 16\r\n                    })\r\n                }),\r\n                disciplines: ko.observableArray([]),\r\n                password: ko.validatedObservable(null).extend({\r\n                    required: {\r\n                        params: true,\r\n                        message: 'Вы не можете оставить это поле путым'\r\n                    },\r\n                    minLength: 6,\r\n                    maxLength: 16\r\n                })\r\n            };\r\n\r\n            self.filter = {\r\n                name: ko.observable(''),\r\n                clear: function(){\r\n                    self.filter.name('');\r\n                }\r\n            };\r\n            self.actions = {\r\n                show: function(data){\r\n                    if (self.mode() === state.none || self.current.lecturer().id() !== data.lecturer.id()){\r\n                        self.alter.fill(data.lecturer);\r\n                        self.current.disciplines(data.disciplines());\r\n                        self.multiselect.tags(data.disciplines());\r\n                        self.mode(state.info);\r\n                        return;\r\n                    }\r\n                    self.actions.cancel();\r\n                },\r\n                start: {\r\n                    create: function(){\r\n                        self.mode() === state.create\r\n                            ? self.mode(state.none)\r\n                            : self.mode(state.create);\r\n                        self.alter.empty();\r\n                        self.current.disciplines([]);\r\n                        self.multiselect.tags([]);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    update: function(){\r\n                        self.mode(state.update);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    remove: function(){\r\n                        commonHelper.modal.open('#remove-request-modal');\r\n                    }\r\n                },\r\n                end: {\r\n                    update: function(){\r\n                        self.current.lecturer.isValid()\r\n                            ? self.post.lecturer()\r\n                            : self.validation[$('[accept-validation]').attr('id')].open();\r\n                    },\r\n                    remove: function(){\r\n                        self.post.removal();\r\n                    }\r\n                },\r\n                cancel: function(){\r\n                    self.mode(state.none);\r\n                    self.alter.empty();\r\n                    self.current.disciplines([]);\r\n                    self.current.password(null);\r\n                },\r\n                password: {\r\n                    change: function(){\r\n                        commonHelper.modal.open('#change-password-modal');\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.password(null);\r\n                        self.validation[$('.box-modal [validate]').attr('id')].close();\r\n                        commonHelper.modal.close('#change-password-modal');\r\n                    },\r\n                    approve: function(){\r\n                        self.current.password.isValid()\r\n                            ? self.post.password()\r\n                            : self.validation[$('.box-modal [validate]').attr('id')].open();\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.alter = {\r\n                stringify: {\r\n                    lecturer: function(){\r\n                        var lecturer = ko.mapping.toJS(self.current.lecturer);\r\n\r\n                        self.mode() === state.create\r\n                            ? delete lecturer.id\r\n                            : delete lecturer.password;\r\n\r\n                        return JSON.stringify({\r\n                            lecturer: lecturer,\r\n                            disciplineIds: self.multiselect.tagIds.call(self)\r\n                        });\r\n                    },\r\n                    password: function(){\r\n                        return JSON.stringify({\r\n                            userId: self.current.lecturer().id(),\r\n                            password: self.current.password()\r\n                        });\r\n                    }\r\n                },\r\n                fill: function(data){\r\n                    self.current.lecturer()\r\n                        .id(data.id()).email(data.email())\r\n                        .firstname(data.firstname())\r\n                        .lastname(data.lastname())\r\n                        .patronymic(data.patronymic())\r\n                        .password('password');\r\n                },\r\n                empty: function(){\r\n                    self.current.lecturer()\r\n                        .id('').email('').password('')\r\n                        .firstname('').lastname('').patronymic('');\r\n                }\r\n            };\r\n            self.get = {\r\n                lecturers: function(){\r\n                    var name = self.filter.name() ? '&name=' + self.filter.name() : '';\r\n                    var url = '/api/lecturers/show' +\r\n                            '?page=' + self.pagination.currentPage() +\r\n                            '&pageSize=' + self.pagination.pageSize() + name;\r\n\r\n                    $ajaxget({\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        successCallback: function (data) {\r\n                            self.current.lecturers(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                        }\r\n                    });\r\n                },\r\n                disciplines: function(){\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.initial.disciplines(data());\r\n                            self.multiselect.data(data());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            self.post = {\r\n                password: function(){\r\n                    var json = self.alter.stringify.password();\r\n                    $post('/api/user/setPassword', json, self.errors, function(){\r\n                        self.actions.password.cancel();\r\n                        self.inform.show({\r\n                            message: 'Пароль успешно изменен'\r\n                        });\r\n                    })();\r\n                },\r\n                removal: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/lecturers/delete/' + self.current.lecturer().id(),\r\n                        data: null,\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.get.lecturers();\r\n                        }\r\n                    };\r\n                    $ajaxpost(requestOptions);\r\n                },\r\n                lecturer: function(){\r\n                    var requestOptions = {\r\n                        url: self.mode() === state.create ? '/api/lecturers/create' : '/api/lecturers/update',\r\n                        errors: self.errors,\r\n                        data: self.alter.stringify.lecturer(),\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.lecturers();\r\n                        }\r\n                    };\r\n                    $ajaxpost(requestOptions);\r\n                }\r\n            };\r\n\r\n            self.filter.name.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.lecturers();\r\n            });\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.get.lecturers();\r\n            });\r\n\r\n            self.get.disciplines();\r\n            self.get.lecturers();\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(studentsViewModel());\r\n});"]}