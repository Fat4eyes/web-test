{"version":3,"sources":["knockout.multiselect.js","disciplines.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"manager-disciplines.js","sourcesContent":["var multiselectVM = function(params){\n    var self = this;\n\n    var _text = params.textField ? params.textField : \"name\";\n    var _value = params.valueField ? params.valueField: \"id\";\n    var _source = params.source;\n    self.tags = params.tags;\n    self.ddwidth = ko.observable('500px');\n    self.query = ko.observable('');\n    self.visible = ko.observable(false);\n    self.data = ko.pureComputed(function(){\n        var filtered = [];\n        var query = new RegExp(self.query().toLowerCase());\n        $.each(_source(), function(i, item){\n            if (query.test(item[_text]().toLowerCase())\n                && $.inArray(item, self.tags()) < 0){\n                filtered.push(item);\n            }\n        });\n        return filtered;\n    });\n\n    var refillTags = function(){\n        var tags = [];\n        if(!self.tags().length) return;\n        $.each(_source(), function(i, sourceItem){\n            $.each(self.tags(), function(j, tagItem){\n                if (tagItem[_value]() === sourceItem[_value]()){\n                    tags.push(sourceItem);\n                }\n            });\n        });\n        self.tags(tags);\n    }();\n\n    self.text = function(item){\n        return item[_text]();\n    };\n    self.select = function(data){\n        self.query('');\n        self.hide();\n        if ($.inArray(data, self.tags()) < 0){\n            self.tags.push(data);\n        }\n    };\n    self.remove = function(data){\n        self.tags.remove(data);\n        self.hide();\n    };\n    self.show = function(){\n        self.visible(true);\n    };\n    self.hide = function(){\n        self.visible(false);\n    };\n    self.leave = function(){\n        setTimeout(self.hide, 100);\n    };\n    self.visible.subscribe(function(visible){\n        if (!visible) return;\n        self.ddwidth($('.knockout-multiselect').width());\n    });\n};\n\nko.components.register('multiselect', {\n    viewModel: {\n        createViewModel: function(params) {\n            return new multiselectVM(params);\n        }\n    },\n    template: '<div class=\"multiselect-wrap knockout-multiselect\">' +\n    '<!-- ko if: tags().length --> ' +\n    '<div class=\"multiselect\"> ' +\n    '<ul data-bind=\"foreach: tags\"> ' +\n    '<li> ' +\n    '<span data-bind=\"click: $parent.remove\" class=\"fa\">&#xf00d;</span> ' +\n    '<span data-bind=\"text: $parent.text($data)\"></span> ' +\n    '</li> ' +\n    '</ul> ' +\n    '</div> ' +\n    '<!-- /ko --> ' +\n    '<input placeholder=\"Начните вводить\"' +\n    'data-bind=\"textInput: query,event: {focusin: show, focusout: leave},css: {full: tags().length}\"/> ' +\n    '</div> ' +\n    '<!-- ko if: data().length -->' +\n    '<div class=\"multiselect-list\" data-bind=\"foreach: data, visible: visible, style: {width: ddwidth}\">' +\n    '<div class=\"exact-item\" data-bind=\"text: $parent.text($data), click: $parent.select\"></div>' +\n    '</div>' +\n    '<!-- /ko -->'\n});","$(document).ready(function(){\n    var disciplinesViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.disciplines,\n                mode: true,\n                pagination: 10,\n                multiselect: true\n            });\n            self.modals = {\n                removeTheme: '#remove-theme-modal',\n                removeDiscipline: '#remove-discipline-modal',\n                section: '#sections-modal',\n                removeSection: '#remove-section-modal'\n            };\n\n            self.current = {\n                disciplines: ko.observableArray([]),\n                discipline: ko.validatedObservable({\n                    id: ko.observable(0),\n                    name: ko.observable('').extend({\n                        required: true,\n                        maxLength: 200\n                    }),\n                    abbreviation: ko.observable('').extend({\n                        required: true,\n                        maxLength: 50\n                    }),\n                    description: ko.observable('')\n                }),\n                themes: ko.observableArray([]),\n                theme: ko.observable({\n                    id: ko.observable(0),\n                    name: ko.observable(''),\n                    mode: ko.observable(state.none)\n                }),\n                sections : ko.observableArray([]),\n                section: ko.observable({\n                    id: ko.observable(0),\n                    themeId: ko.observable(0),\n                    name: ko.observable(''),\n                    content: ko.observable('')\n                })\n            };\n            self.filter = {\n                discipline: ko.observable(''),\n                profile : ko.observable(),\n                clear: function(){\n                    self.filter.discipline('').profile(null);\n                }\n            };\n\n            self.actions = {\n                theme: {\n                    start: {\n                        add: function(){\n                            self.current.theme()\n                                .id(0).name('')\n                                .mode(state.create);\n                        },\n                        remove: function(data, e){\n                            e.stopPropagation();\n                            self.current.theme()\n                                .id(data.id())\n                                .name(data.name())\n                                .mode(state.remove);\n                            commonHelper.modal.open(self.modals.removeTheme);\n                        }\n                    },\n                    end: {\n                        add: function(){\n                            if (!self.current.theme().name()) return;\n                            self.post.theme();\n                        },\n                        remove: function(){\n                            self.post.removal.theme();\n                        }\n                    },\n                    cancel: function(){\n                        self.current.theme()\n                            .id(0).name('')\n                            .mode(state.none);\n                        self.multiselect.tags([]);\n                    },\n                    move: function(data){\n                        window.location.href = '/admin/theme/' + data.id();\n                    }\n                },\n                discipline: {\n                    show: function(data){\n                        if (self.mode() === state.none ||\n                            self.current.discipline().id() !== data.id()){\n                            self.mode(state.info);\n                            self.alter.fill(data);\n                            self.get.disciplineProfiles();\n                            self.get.themes();\n                            return;\n                        }\n                        self.actions.discipline.cancel();\n                    },\n                    start: {\n                        add: function(){\n                            self.mode() === state.create\n                                ? self.mode(state.none)\n                                : self.mode(state.create);\n                            self.alter.empty();\n                            self.multiselect.tags([]);\n                            commonHelper.buildValidationList(self.validation);\n                        },\n                        update: function(){\n                            self.mode(state.update);\n                            commonHelper.buildValidationList(self.validation);\n                        },\n                        remove: function(){\n                            self.mode(state.remove);\n                            commonHelper.modal.open(self.modals.removeDiscipline);\n                        }\n                    },\n                    end: {\n                        update: function(){\n                            if (!self.current.discipline.isValid()){\n                                self.validation[$('[accept-validation]').attr('id')].open();\n                                return;\n                            }\n                            if (!self.multiselect.tags().length){\n                                self.validation[$('[special]').attr('id')].open();\n                                return;\n                            }\n                            self.post.discipline();\n                        },\n                        remove: function(){\n                            commonHelper.modal.close(self.modals.removeDiscipline);\n                            self.post.removal.discipline();\n                        }\n                    },\n                    cancel: function(){\n                        self.mode(state.none);\n                        self.alter.empty();\n                    },\n                    move: function(data, e){\n                        e.stopPropagation();\n                        commonHelper.cookies.create({\n                            testsDisciplineId: data.id()\n                        });\n                        window.location.href = '/admin/tests';\n                    }\n                },\n                section: {\n                    show: function(data, e){\n                        e.stopPropagation();\n                        self.get.sectionsByDiscipline();\n                        commonHelper.modal.open(self.modals.section);\n                    },\n                    start: {\n                        remove: function(){\n                            commonHelper.modal.open('#remove-section-modal');\n                            self.current.section(data);\n                        }\n                    },\n                    end: {\n                        update: function(){\n                            window.location.href = '/admin/editor/' + data.id();\n                        },\n                        remove: function(){\n                            self.post.removal.section();\n                        }\n                    },\n                    move: function(data){\n                        window.location.href = '/section/' + data.id();\n                    },\n                    theme: {\n                        show: function(data, e){\n                            e.stopPropagation();\n                            self.current.theme().name(data.name()).id(data.id());\n                            self.get.sectionsByTheme();\n                            commonHelper.modal.open(self.modals.section);\n                        },\n                        add: function(){\n                            window.location.href = '/admin/editor/new/' +\n                                self.current.discipline().id() + '/' +\n                                self.current.theme().id();\n                        }\n                    }\n\n                }\n            };\n\n            self.alter = {\n                fill: function(data){\n                    self.current.discipline()\n                        .id(data.id())\n                        .name(data.name())\n                        .abbreviation(data.abbreviation())\n                        .description(data.description());\n                },\n                empty: function(){\n                    self.current.discipline()\n                        .id(0)\n                        .name('')\n                        .abbreviation('')\n                        .description('');\n                },\n                stringify: function(){\n                    var edit = self.current.discipline();\n                    var forpost = {\n                        name: edit.name(),\n                        abbreviation: edit.abbreviation(),\n                        description: edit.description()\n                    };\n                    self.mode() === state.update ? forpost.id = edit.id() : null;\n\n                    return JSON.stringify({\n                        discipline: forpost,\n                        profileIds: self.multiselect.tagIds.call(self)\n                    });\n                }\n            };\n\n            self.get = {\n                disciplines: function(profileId){\n                    var filter = self.filter;\n                    var profile = 'profile=' + (filter.profile() ? filter.profile().id() : '');\n                    var name = 'name=' + filter.discipline();\n                    var page = 'page=' + self.pagination.currentPage();\n                    var pageSize = 'pageSize=' + self.pagination.pageSize();\n                    var url = '/api/disciplines/show?' + page + '&' + pageSize + '&' + name + '&' + profile;\n\n                    $ajaxget({\n                        url: url,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.disciplines(data.data());\n                            self.pagination.itemsCount(data.count());\n                        }\n                    });\n\n                },\n                disciplineProfiles: function(){\n                    var id = self.current.discipline().id();\n                    if (!id) return;\n                    self.multiselect.tags([]);\n                    $ajaxget({\n                        url: '/api/disciplines/' + id + '/profiles',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            $.each(self.multiselect.data(), function(i, profile){\n                                $.each(data(), function(i, elem){\n                                    if (elem.profile_id() == profile.id())\n                                        self.multiselect.tags.push(profile);\n                                });\n                            });\n                        }\n                    });\n                },\n                profiles: function(){\n                    $ajaxget({\n                        url: '/api/profiles',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.multiselect.data(data());\n                        }\n                    });\n                },\n                themes: function(){\n                    var url = '/api/disciplines/' + self.current.discipline().id() +'/themes';\n                    $.get(url, function(response){\n                        var result = ko.mapping.fromJSON(response);\n                        if (result.Success()){\n                            self.current.themes(result.Data());\n                            return;\n                        }\n                        self.errors.show(result.Message());\n                    });\n                },\n                sectionsByTheme: function() {\n                    var url = '/api/sections/theme/' + self.current.theme().id() ;\n                    $.get(url, function(response){\n                        var result = ko.mapping.fromJSON(response);\n                        if (result.Success()){\n                            self.current.sections(result.Data());\n                            return;\n                        }\n                        self.errors.show(result.Message());\n                    });\n                },\n                sectionsByDiscipline: function () {\n                    var url = '/api/sections/discipline/' + self.current.discipline().id() ;\n                    $.get(url, function(response){\n                        var result = ko.mapping.fromJSON(response);\n                        if (result.Success()){\n                            self.current.sections(result.Data());\n                            return;\n                        }\n                        self.errors.show(result.Message());\n                    });\n                }\n            };\n            self.get.disciplines();\n            self.get.profiles();\n\n            self.post = {\n                discipline: function(){\n                    $ajaxpost({\n                        url: '/api/disciplines/' + self.mode(),\n                        errors: self.errors,\n                        data: self.alter.stringify(),\n                        successCallback: function(){\n                            self.actions.discipline.cancel();\n                            self.get.disciplines();\n                        }\n                    });\n                },\n                theme: function(){\n                    var json = JSON.stringify({\n                        theme: {\n                            name: self.current.theme().name()\n                        },\n                        disciplineId: self.current.discipline().id()\n                    });\n\n                    $ajaxpost({\n                        url: '/api/disciplines/themes/create',\n                        errors: self.errors,\n                        data: json,\n                        successCallback: function(){\n                            self.actions.theme.cancel();\n                            self.get.themes();\n                        }\n                    });\n                },\n                removal: {\n                    theme: function(){\n                        $ajaxpost({\n                            url: '/api/disciplines/themes/delete/' + self.current.theme().id(),\n                            data: null,\n                            errors: self.errors,\n                            successCallback: function(){\n                                commonHelper.modal.close(self.modals.removeTheme);\n                                self.actions.theme.cancel();\n                                self.get.themes();\n                            }\n                        });\n                    },\n                    discipline: function(){\n                        $ajaxpost({\n                            url: '/api/disciplines/delete/' + self.current.discipline().id(),\n                            errors: self.errors,\n                            data: null,\n                            successCallback: function(){\n                                self.actions.discipline.cancel();\n                                self.get.disciplines();\n                            }\n                        });\n                    },\n                    section: function(){\n                        $ajaxpost({\n                            url: '/api/sections/delete/' + self.current.section().id(),\n                            errors: self.errors,\n                            data: null,\n                            successCallback: function(){\n                                commonHelper.modal.close(self.modals.removeSection);\n                                self.get.sections();\n                            }\n                        });\n                    }\n                }\n            };\n\n            self.events.theme = function(data, e){\n                if (e.which === 13)\n                    self.actions.theme.end.add();\n            };\n\n            // SUBSCRIPTIONS\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.mode(state.none);\n                self.get.disciplines();\n            });\n            self.filter.discipline.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.disciplines();\n            });\n            self.filter.profile.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.disciplines();\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(disciplinesViewModel());\n});"]}