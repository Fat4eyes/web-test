{"version":3,"sources":["knockout.multiselect.js","disciplines.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"manager-disciplines.js","sourcesContent":["var multiselectVM = function(params){\r\n    var self = this;\r\n\r\n    var _text = params.textField ? params.textField : \"name\";\r\n    var _value = params.valueField ? params.valueField: \"id\";\r\n    var _source = params.source;\r\n    self.tags = params.tags;\r\n    self.ddwidth = ko.observable('500px');\r\n    self.query = ko.observable('');\r\n    self.visible = ko.observable(false);\r\n    self.data = ko.pureComputed(function(){\r\n        var filtered = [];\r\n        var query = new RegExp(self.query().toLowerCase());\r\n        $.each(_source(), function(i, item){\r\n            if (query.test(item[_text]().toLowerCase())\r\n                && $.inArray(item, self.tags()) < 0){\r\n                filtered.push(item);\r\n            }\r\n        });\r\n        return filtered;\r\n    });\r\n\r\n    var refillTags = function(){\r\n        var tags = [];\r\n        if(!self.tags().length) return;\r\n        $.each(_source(), function(i, sourceItem){\r\n            $.each(self.tags(), function(j, tagItem){\r\n                if (tagItem[_value]() === sourceItem[_value]()){\r\n                    tags.push(sourceItem);\r\n                }\r\n            });\r\n        });\r\n        self.tags(tags);\r\n    }();\r\n\r\n    self.text = function(item){\r\n        return item[_text]();\r\n    };\r\n    self.select = function(data){\r\n        self.query('');\r\n        self.hide();\r\n        if ($.inArray(data, self.tags()) < 0){\r\n            self.tags.push(data);\r\n        }\r\n    };\r\n    self.remove = function(data){\r\n        self.tags.remove(data);\r\n        self.hide();\r\n    };\r\n    self.show = function(){\r\n        self.visible(true);\r\n    };\r\n    self.hide = function(){\r\n        self.visible(false);\r\n    };\r\n    self.leave = function(){\r\n        setTimeout(self.hide, 100);\r\n    };\r\n    self.visible.subscribe(function(visible){\r\n        if (!visible) return;\r\n        self.ddwidth($('.knockout-multiselect').width());\r\n    });\r\n};\r\n\r\nko.components.register('multiselect', {\r\n    viewModel: {\r\n        createViewModel: function(params) {\r\n            return new multiselectVM(params);\r\n        }\r\n    },\r\n    template: '<div class=\"multiselect-wrap knockout-multiselect\">' +\r\n    '<!-- ko if: tags().length --> ' +\r\n    '<div class=\"multiselect\"> ' +\r\n    '<ul data-bind=\"foreach: tags\"> ' +\r\n    '<li> ' +\r\n    '<span data-bind=\"click: $parent.remove\" class=\"fa\">&#xf00d;</span> ' +\r\n    '<span data-bind=\"text: $parent.text($data)\"></span> ' +\r\n    '</li> ' +\r\n    '</ul> ' +\r\n    '</div> ' +\r\n    '<!-- /ko --> ' +\r\n    '<input placeholder=\"Начните вводить\"' +\r\n    'data-bind=\"textInput: query,event: {focusin: show, focusout: leave},css: {full: tags().length}\"/> ' +\r\n    '</div> ' +\r\n    '<!-- ko if: data().length -->' +\r\n    '<div class=\"multiselect-list\" data-bind=\"foreach: data, visible: visible, style: {width: ddwidth}\">' +\r\n    '<div class=\"exact-item\" data-bind=\"text: $parent.text($data), click: $parent.select\"></div>' +\r\n    '</div>' +\r\n    '<!-- /ko -->'\r\n});","$(document).ready(function(){\r\n    var disciplinesViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.disciplines,\r\n                mode: true,\r\n                pagination: 10,\r\n                multiselect: true\r\n            });\r\n            self.modals = {\r\n                removeTheme: '#remove-theme-modal',\r\n                removeDiscipline: '#remove-discipline-modal',\r\n                section: '#sections-modal',\r\n                removeSection: '#remove-section-modal'\r\n            };\r\n\r\n            self.current = {\r\n                disciplines: ko.observableArray([]),\r\n                discipline: ko.validatedObservable({\r\n                    id: ko.observable(0),\r\n                    name: ko.observable('').extend({\r\n                        required: true,\r\n                        maxLength: 200\r\n                    }),\r\n                    abbreviation: ko.observable('').extend({\r\n                        required: true,\r\n                        maxLength: 50\r\n                    }),\r\n                    description: ko.observable('')\r\n                }),\r\n                themes: ko.observableArray([]),\r\n                theme: ko.observable({\r\n                    id: ko.observable(0),\r\n                    name: ko.observable(''),\r\n                    mode: ko.observable(state.none)\r\n                }),\r\n                sections : ko.observableArray([]),\r\n                section: ko.observable({\r\n                    id: ko.observable(0),\r\n                    themeId: ko.observable(0),\r\n                    name: ko.observable(''),\r\n                    content: ko.observable('')\r\n                })\r\n            };\r\n            self.filter = {\r\n                discipline: ko.observable(''),\r\n                profile : ko.observable(),\r\n                clear: function(){\r\n                    self.filter.discipline('').profile(null);\r\n                }\r\n            };\r\n\r\n            self.actions = {\r\n                theme: {\r\n                    start: {\r\n                        add: function(){\r\n                            self.current.theme()\r\n                                .id(0).name('')\r\n                                .mode(state.create);\r\n                        },\r\n                        remove: function(data, e){\r\n                            e.stopPropagation();\r\n                            self.current.theme()\r\n                                .id(data.id())\r\n                                .name(data.name())\r\n                                .mode(state.remove);\r\n                            commonHelper.modal.open(self.modals.removeTheme);\r\n                        }\r\n                    },\r\n                    end: {\r\n                        add: function(){\r\n                            if (!self.current.theme().name()) return;\r\n                            self.post.theme();\r\n                        },\r\n                        remove: function(){\r\n                            self.post.removal.theme();\r\n                        }\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.theme()\r\n                            .id(0).name('')\r\n                            .mode(state.none);\r\n                        self.multiselect.tags([]);\r\n                    },\r\n                    move: function(data){\r\n                        window.location.href = '/admin/theme/' + data.id();\r\n                    }\r\n                },\r\n                discipline: {\r\n                    show: function(data){\r\n                        if (self.mode() === state.none ||\r\n                            self.current.discipline().id() !== data.id()){\r\n                            self.mode(state.info);\r\n                            self.alter.fill(data);\r\n                            self.get.disciplineProfiles();\r\n                            self.get.themes();\r\n                            return;\r\n                        }\r\n                        self.actions.discipline.cancel();\r\n                    },\r\n                    start: {\r\n                        add: function(){\r\n                            self.mode() === state.create\r\n                                ? self.mode(state.none)\r\n                                : self.mode(state.create);\r\n                            self.alter.empty();\r\n                            self.multiselect.tags([]);\r\n                            commonHelper.buildValidationList(self.validation);\r\n                        },\r\n                        update: function(){\r\n                            self.mode(state.update);\r\n                            commonHelper.buildValidationList(self.validation);\r\n                        },\r\n                        remove: function(){\r\n                            self.mode(state.remove);\r\n                            commonHelper.modal.open(self.modals.removeDiscipline);\r\n                        }\r\n                    },\r\n                    end: {\r\n                        update: function(){\r\n                            if (!self.current.discipline.isValid()){\r\n                                self.validation[$('[accept-validation]').attr('id')].open();\r\n                                return;\r\n                            }\r\n                            if (!self.multiselect.tags().length){\r\n                                self.validation[$('[special]').attr('id')].open();\r\n                                return;\r\n                            }\r\n                            self.post.discipline();\r\n                        },\r\n                        remove: function(){\r\n                            commonHelper.modal.close(self.modals.removeDiscipline);\r\n                            self.post.removal.discipline();\r\n                        }\r\n                    },\r\n                    cancel: function(){\r\n                        self.mode(state.none);\r\n                        self.alter.empty();\r\n                    },\r\n                    move: function(data, e){\r\n                        e.stopPropagation();\r\n                        commonHelper.cookies.create({\r\n                            testsDisciplineId: data.id()\r\n                        });\r\n                        window.location.href = '/admin/tests';\r\n                    }\r\n                },\r\n                section: {\r\n                    show: function(data, e){\r\n                        e.stopPropagation();\r\n                        self.get.sectionsByDiscipline();\r\n                        commonHelper.modal.open(self.modals.section);\r\n                    },\r\n                    start: {\r\n                        remove: function(){\r\n                            commonHelper.modal.open('#remove-section-modal');\r\n                            self.current.section(data);\r\n                        }\r\n                    },\r\n                    end: {\r\n                        update: function(){\r\n                            window.location.href = '/admin/editor/' + data.id();\r\n                        },\r\n                        remove: function(){\r\n                            self.post.removal.section();\r\n                        }\r\n                    },\r\n                    move: function(data){\r\n                        window.location.href = '/section/' + data.id();\r\n                    },\r\n                    theme: {\r\n                        show: function(data, e){\r\n                            e.stopPropagation();\r\n                            self.current.theme().name(data.name()).id(data.id());\r\n                            self.get.sectionsByTheme();\r\n                            commonHelper.modal.open(self.modals.section);\r\n                        },\r\n                        add: function(){\r\n                            window.location.href = '/admin/editor/new/' +\r\n                                self.current.discipline().id() + '/' +\r\n                                self.current.theme().id();\r\n                        }\r\n                    }\r\n\r\n                }\r\n            };\r\n\r\n            self.alter = {\r\n                fill: function(data){\r\n                    self.current.discipline()\r\n                        .id(data.id())\r\n                        .name(data.name())\r\n                        .abbreviation(data.abbreviation())\r\n                        .description(data.description());\r\n                },\r\n                empty: function(){\r\n                    self.current.discipline()\r\n                        .id(0)\r\n                        .name('')\r\n                        .abbreviation('')\r\n                        .description('');\r\n                },\r\n                stringify: function(){\r\n                    var edit = self.current.discipline();\r\n                    var forpost = {\r\n                        name: edit.name(),\r\n                        abbreviation: edit.abbreviation(),\r\n                        description: edit.description()\r\n                    };\r\n                    self.mode() === state.update ? forpost.id = edit.id() : null;\r\n\r\n                    return JSON.stringify({\r\n                        discipline: forpost,\r\n                        profileIds: self.multiselect.tagIds.call(self)\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get = {\r\n                disciplines: function(profileId){\r\n                    var filter = self.filter;\r\n                    var profile = 'profile=' + (filter.profile() ? filter.profile().id() : '');\r\n                    var name = 'name=' + filter.discipline();\r\n                    var page = 'page=' + self.pagination.currentPage();\r\n                    var pageSize = 'pageSize=' + self.pagination.pageSize();\r\n                    var url = '/api/disciplines/show?' + page + '&' + pageSize + '&' + name + '&' + profile;\r\n\r\n                    $ajaxget({\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.disciplines(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                        }\r\n                    });\r\n\r\n                },\r\n                disciplineProfiles: function(){\r\n                    var id = self.current.discipline().id();\r\n                    if (!id) return;\r\n                    self.multiselect.tags([]);\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/' + id + '/profiles',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            $.each(self.multiselect.data(), function(i, profile){\r\n                                $.each(data(), function(i, elem){\r\n                                    if (elem.profile_id() == profile.id())\r\n                                        self.multiselect.tags.push(profile);\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                profiles: function(){\r\n                    $ajaxget({\r\n                        url: '/api/profiles',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.multiselect.data(data());\r\n                        }\r\n                    });\r\n                },\r\n                themes: function(){\r\n                    var url = '/api/disciplines/' + self.current.discipline().id() +'/themes';\r\n                    $.get(url, function(response){\r\n                        const result = JSON.parse(response);\r\n\r\n                        for (let i = 0; i < result.Data.length; i++) {\r\n                            result.Data[i].questionsCount = (i + 1) * 100;\r\n                            result.Data[i].totalTimeInSeconds = i * 10;\r\n                        }\r\n\r\n                        if (result.Success){\r\n                            self.current.themes(ko.mapping.fromJS(result.Data)());\r\n                            return;\r\n                        }\r\n                        self.errors.show(result.Message());\r\n                    });\r\n                },\r\n                sectionsByTheme: function() {\r\n                    var url = '/api/sections/theme/' + self.current.theme().id() ;\r\n                    $.get(url, function(response){\r\n                        var result = ko.mapping.fromJSON(response);\r\n                        if (result.Success()){\r\n                            self.current.sections(result.Data());\r\n                            return;\r\n                        }\r\n                        self.errors.show(result.Message());\r\n                    });\r\n                },\r\n                sectionsByDiscipline: function () {\r\n                    var url = '/api/sections/discipline/' + self.current.discipline().id() ;\r\n                    $.get(url, function(response){\r\n                        var result = ko.mapping.fromJSON(response);\r\n                        if (result.Success()){\r\n                            self.current.sections(result.Data());\r\n                            return;\r\n                        }\r\n                        self.errors.show(result.Message());\r\n                    });\r\n                }\r\n            };\r\n            self.get.disciplines();\r\n            self.get.profiles();\r\n\r\n            self.post = {\r\n                discipline: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/disciplines/' + self.mode(),\r\n                        errors: self.errors,\r\n                        data: self.alter.stringify(),\r\n                        successCallback: function(){\r\n                            self.actions.discipline.cancel();\r\n                            self.get.disciplines();\r\n                        }\r\n                    });\r\n                },\r\n                theme: function(){\r\n                    var json = JSON.stringify({\r\n                        theme: {\r\n                            name: self.current.theme().name()\r\n                        },\r\n                        disciplineId: self.current.discipline().id()\r\n                    });\r\n\r\n                    $ajaxpost({\r\n                        url: '/api/disciplines/themes/create',\r\n                        errors: self.errors,\r\n                        data: json,\r\n                        successCallback: function(){\r\n                            self.actions.theme.cancel();\r\n                            self.get.themes();\r\n                        }\r\n                    });\r\n                },\r\n                removal: {\r\n                    theme: function(){\r\n                        $ajaxpost({\r\n                            url: '/api/disciplines/themes/delete/' + self.current.theme().id(),\r\n                            data: null,\r\n                            errors: self.errors,\r\n                            successCallback: function(){\r\n                                commonHelper.modal.close(self.modals.removeTheme);\r\n                                self.actions.theme.cancel();\r\n                                self.get.themes();\r\n                            }\r\n                        });\r\n                    },\r\n                    discipline: function(){\r\n                        $ajaxpost({\r\n                            url: '/api/disciplines/delete/' + self.current.discipline().id(),\r\n                            errors: self.errors,\r\n                            data: null,\r\n                            successCallback: function(){\r\n                                self.actions.discipline.cancel();\r\n                                self.get.disciplines();\r\n                            }\r\n                        });\r\n                    },\r\n                    section: function(){\r\n                        $ajaxpost({\r\n                            url: '/api/sections/delete/' + self.current.section().id(),\r\n                            errors: self.errors,\r\n                            data: null,\r\n                            successCallback: function(){\r\n                                commonHelper.modal.close(self.modals.removeSection);\r\n                                self.get.sections();\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.events.theme = function(data, e){\r\n                if (e.which === 13)\r\n                    self.actions.theme.end.add();\r\n            };\r\n\r\n            // SUBSCRIPTIONS\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.get.disciplines();\r\n            });\r\n            self.filter.discipline.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.disciplines();\r\n            });\r\n            self.filter.profile.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.disciplines();\r\n            });\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(disciplinesViewModel());\r\n});"]}