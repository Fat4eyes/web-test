{"version":3,"sources":["knockout.multiselect.js","tests.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"manager-tests.js","sourcesContent":["var multiselectVM = function(params){\r\n    var self = this;\r\n\r\n    var _text = params.textField ? params.textField : \"name\";\r\n    var _value = params.valueField ? params.valueField: \"id\";\r\n    var _source = params.source;\r\n    self.tags = params.tags;\r\n    self.ddwidth = ko.observable('500px');\r\n    self.query = ko.observable('');\r\n    self.visible = ko.observable(false);\r\n    self.data = ko.pureComputed(function(){\r\n        var filtered = [];\r\n        var query = new RegExp(self.query().toLowerCase());\r\n        $.each(_source(), function(i, item){\r\n            if (query.test(item[_text]().toLowerCase())\r\n                && $.inArray(item, self.tags()) < 0){\r\n                filtered.push(item);\r\n            }\r\n        });\r\n        return filtered;\r\n    });\r\n\r\n    var refillTags = function(){\r\n        var tags = [];\r\n        if(!self.tags().length) return;\r\n        $.each(_source(), function(i, sourceItem){\r\n            $.each(self.tags(), function(j, tagItem){\r\n                if (tagItem[_value]() === sourceItem[_value]()){\r\n                    tags.push(sourceItem);\r\n                }\r\n            });\r\n        });\r\n        self.tags(tags);\r\n    }();\r\n\r\n    self.text = function(item){\r\n        return item[_text]();\r\n    };\r\n    self.select = function(data){\r\n        self.query('');\r\n        self.hide();\r\n        if ($.inArray(data, self.tags()) < 0){\r\n            self.tags.push(data);\r\n        }\r\n    };\r\n    self.remove = function(data){\r\n        self.tags.remove(data);\r\n        self.hide();\r\n    };\r\n    self.show = function(){\r\n        self.visible(true);\r\n    };\r\n    self.hide = function(){\r\n        self.visible(false);\r\n    };\r\n    self.leave = function(){\r\n        setTimeout(self.hide, 100);\r\n    };\r\n    self.visible.subscribe(function(visible){\r\n        if (!visible) return;\r\n        self.ddwidth($('.knockout-multiselect').width());\r\n    });\r\n};\r\n\r\nko.components.register('multiselect', {\r\n    viewModel: {\r\n        createViewModel: function(params) {\r\n            return new multiselectVM(params);\r\n        }\r\n    },\r\n    template: '<div class=\"multiselect-wrap knockout-multiselect\">' +\r\n    '<!-- ko if: tags().length --> ' +\r\n    '<div class=\"multiselect\"> ' +\r\n    '<ul data-bind=\"foreach: tags\"> ' +\r\n    '<li> ' +\r\n    '<span data-bind=\"click: $parent.remove\" class=\"fa\">&#xf00d;</span> ' +\r\n    '<span data-bind=\"text: $parent.text($data)\"></span> ' +\r\n    '</li> ' +\r\n    '</ul> ' +\r\n    '</div> ' +\r\n    '<!-- /ko --> ' +\r\n    '<input placeholder=\"Начните вводить\"' +\r\n    'data-bind=\"textInput: query,event: {focusin: show, focusout: leave},css: {full: tags().length}\"/> ' +\r\n    '</div> ' +\r\n    '<!-- ko if: data().length -->' +\r\n    '<div class=\"multiselect-list\" data-bind=\"foreach: data, visible: visible, style: {width: ddwidth}\">' +\r\n    '<div class=\"exact-item\" data-bind=\"text: $parent.text($data), click: $parent.select\"></div>' +\r\n    '</div>' +\r\n    '<!-- /ko -->'\r\n});","$(document).ready(function(){\r\n    var testsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.tests,\r\n                mode: true,\r\n                pagination: 10,\r\n                multiselect: true\r\n            });\r\n            self.modals = {\r\n                removeTest: '#remove-test-modal'\r\n            };\r\n\r\n            self.current = {\r\n                test: ko.validatedObservable({\r\n                    id: ko.observable(0),\r\n                    subject: ko.observable().extend({ required: true }),\r\n                    attempts: ko.observable(3).extend({required: true, digit: true, min: 1, max: 100 }),\r\n                    timeTotal: ko.observable(0),\r\n                    minutes: ko.observable().extend({ required: true, digit: true, min: 1, max: 60}),\r\n                    seconds: ko.observable().extend({ required: true, digit: true, min: 0, max: 59}),\r\n                    type: ko.observable(true),\r\n                    isActive: ko.observable(true),\r\n                    isRandom: ko.observable(true),\r\n                    themes: ko.observableArray([])\r\n                }),\r\n                tests: ko.observableArray([]),\r\n                disciplines: ko.observableArray([])\r\n            };\r\n            self.filter = {\r\n                name: ko.observable(''),\r\n                discipline: ko.observable(),\r\n                set: function(){\r\n                    var cookie = $.cookie();\r\n                    if (!cookie.testsDisciplineId){\r\n                        self.get.tests();\r\n                        return;\r\n                    }\r\n                    $.each(self.current.disciplines(), function(i, item){\r\n                        if (item.id() == cookie.testsDisciplineId)\r\n                            self.filter.discipline(item);\r\n                    });\r\n                    self.get.tests();\r\n                    commonHelper.cookies.remove(cookie);\r\n                },\r\n                clear: function(){\r\n                    self.filter\r\n                        .discipline(null).name('');\r\n                }\r\n            };\r\n            self.alter = {\r\n                fill: function(data){\r\n                    var minutes = Math.floor(data.timeTotal()/60);\r\n                    var seconds = data.timeTotal()%60;\r\n                    var type = data.type() === 1;\r\n\r\n                    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n                    seconds = seconds < 10 ? '0' + seconds : seconds;\r\n\r\n                    self.current.test()\r\n                        .id(data.id()).subject(data.subject())\r\n                        .attempts(data.attempts()).timeTotal(data.timeTotal())\r\n                        .minutes(minutes).seconds(seconds).type(type)\r\n                        .isActive(data.isActive()).isRandom(data.isRandom());\r\n\r\n                    self.get.testThemes();\r\n                },\r\n                empty: function(){\r\n                    self.current.test()\r\n                        .id(0)\r\n                        .subject('')\r\n                        .attempts(3)\r\n                        .timeTotal(0)\r\n                        .minutes('')\r\n                        .seconds('')\r\n                        .type(true)\r\n                        .isActive(true)\r\n                        .isRandom(true)\r\n                        .themes([]);\r\n                },\r\n                stringify: function(){\r\n                    var t = self.current.test();\r\n                    t.timeTotal(+t.minutes() * 60 + +t.seconds());\r\n\r\n                    var test = ko.mapping.toJS(self.current.test);\r\n\r\n                    delete test.minutes;\r\n                    delete test.seconds;\r\n                    delete test.themes;\r\n\r\n                    test.type = test.type ? 1 : 2;\r\n                    self.mode() === state.create ? delete test.id : null;\r\n                    \r\n                    return JSON.stringify({\r\n                        test: test,\r\n                        themeIds: self.multiselect.tagIds.call(self),\r\n                        disciplineId: self.filter.discipline().id()\r\n                    });\r\n                },\r\n                set: {\r\n                    filter: function(){\r\n                        var discipline = self.filter.discipline;\r\n                        var url = window.location.href;\r\n\r\n                        if (!discipline()){\r\n                            var disciplineId = +url.substr(url.lastIndexOf('/')+1);\r\n\r\n                            if (!$.isNumeric(disciplineId)) return;\r\n\r\n                            var disciplineReceived = self.current.disciplines().find(function(item){\r\n                                return item.id() === disciplineId;\r\n                            });\r\n                            discipline(disciplineReceived);\r\n                        }\r\n                    },\r\n                    random: {\r\n                        asTrue: function(){\r\n                            self.current.test().isRandom(true);\r\n                        },\r\n                        asFalse: function(){\r\n                            self.current.test().isRandom(false);\r\n                        }\r\n                    },\r\n                    type: {\r\n                        asTrue: function(){\r\n                            self.current.test().type(true);\r\n                        },\r\n                        asFalse: function(){\r\n                            self.current.test().type(false);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.actions = {\r\n                show: function(data){\r\n                    self.current.test().id() === data.id()\r\n                        ? self.actions.cancel()\r\n                        : self.mode(state.info) && self.alter.fill(data);\r\n                },\r\n                start: {\r\n                    add: function(){\r\n                        self.mode() === state.create\r\n                            ? self.mode(state.none)\r\n                            : self.mode(state.create);\r\n                        self.alter.empty();\r\n                        self.multiselect.tags([]);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    update: function(){\r\n                        self.mode(state.update);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    remove: function(){\r\n                        self.mode(state.remove);\r\n                        commonHelper.modal.open(self.modals.removeTest);\r\n                    }\r\n                },\r\n                end: {\r\n                    update: function(){\r\n                        if (!self.current.test.isValid()){\r\n                            self.validation[$('[accept-validation]').attr('id')].open();\r\n                            return;\r\n                        }\r\n                        if (!self.multiselect.tags().length){\r\n                            self.validation[$('[special]').attr('id')].open();\r\n                            return;\r\n                        }\r\n                        self.post.test();\r\n                    },\r\n                    remove: function(){\r\n                        self.post.removedTest();\r\n                    }\r\n                },\r\n                cancel: function(){\r\n                    self.alter.empty();\r\n                    self.mode(state.none);\r\n                }\r\n            };\r\n\r\n            self.get = {\r\n                disciplines: function(){\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.disciplines(data());\r\n                            self.filter.set();\r\n                        }\r\n                    });\r\n                },\r\n                tests: function(){\r\n                    if (!self.filter.discipline()){\r\n                        self.current.tests([]);\r\n                        return;\r\n                    }\r\n                    var page = '?page=' + self.pagination.currentPage();\r\n                    var pageSize = '&pageSize=' + self.pagination.pageSize();\r\n                    var name = self.filter.name() ?'&name=' + self.filter.name() : '';\r\n                    var filterDiscipline = '&discipline=' + self.filter.discipline().id();\r\n\r\n                    var url = '/api/tests/show' + page + pageSize + name + filterDiscipline;\r\n                    $ajaxget({\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.tests(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                            self.get.themes();\r\n                        }\r\n                    });\r\n                },\r\n                themes: function(){\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/' + self.filter.discipline().id() + '/themes',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.multiselect.data(data());\r\n                        }\r\n                    });\r\n                },\r\n                testThemes: function(){\r\n                    $ajaxget({\r\n                        url: '/api/tests/' + self.current.test().id() + '/themes',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.test().themes(data());\r\n                            self.multiselect.tags(data());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            self.post = {\r\n                test: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/tests/' + self.mode(),\r\n                        data: self.alter.stringify(),\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.tests();\r\n                        }\r\n                    });\r\n                },\r\n                removedTest: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/tests/delete/' + self.current.test().id(),\r\n                        data: null,\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.tests();\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get.disciplines();\r\n\r\n            //SUBSCRIPTIONS\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.get.tests();\r\n            });\r\n            self.filter.discipline.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.tests();\r\n            });\r\n            self.filter.name.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.tests();\r\n            });\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(testsViewModel());\r\n});"]}