{"version":3,"sources":["tests.js"],"names":[],"mappingsfile":"manager-tests.js","sourcesContent":["$(document).ready(function(){\n    var testsViewModel = function(){\n        return new function(){\n            var self = this;\n            initializeViewModel.call(self, {\n                page: menu.admin.tests,\n                mode: true,\n                pagination: 10,\n                multiselect: true\n            });\n            self.modals = {\n                removeTest: '#remove-test-modal'\n            };\n\n            self.current = {\n                test: ko.validatedObservable({\n                    id: ko.observable(0),\n                    subject: ko.observable().extend({ required: true }),\n                    attempts: ko.observable(3).extend({required: true, digit: true, min: 1, max: 100 }),\n                    timeTotal: ko.observable(0),\n                    minutes: ko.observable().extend({ required: true, digit: true, min: 1, max: 60}),\n                    seconds: ko.observable().extend({ required: true, digit: true, min: 0, max: 59}),\n                    type: ko.observable(true),\n                    isActive: ko.observable(true),\n                    isRandom: ko.observable(true),\n                    themes: ko.observableArray([])\n                }),\n                tests: ko.observableArray([]),\n                disciplines: ko.observableArray([])\n            };\n            self.filter = {\n                name: ko.observable(''),\n                discipline: ko.observable(),\n                set: function(){\n                    var cookie = $.cookie();\n                    if (!cookie.testsDisciplineId){\n                        self.get.tests();\n                        return;\n                    }\n                    $.each(self.current.disciplines(), function(i, item){\n                        if (item.id() == cookie.testsDisciplineId)\n                            self.filter.discipline(item);\n                    });\n                    self.get.tests();\n                    commonHelper.cookies.remove(cookie);\n                },\n                clear: function(){\n                    self.filter\n                        .discipline(null).name('');\n                }\n            };\n            self.alter = {\n                fill: function(data){\n                    var minutes = Math.floor(data.timeTotal()/60);\n                    var seconds = data.timeTotal()%60;\n                    var type = data.type() === 1;\n\n                    minutes = minutes < 10 ? '0' + minutes : minutes;\n                    seconds = seconds < 10 ? '0' + seconds : seconds;\n\n                    self.current.test()\n                        .id(data.id()).subject(data.subject())\n                        .attempts(data.attempts()).timeTotal(data.timeTotal())\n                        .minutes(minutes).seconds(seconds).type(type)\n                        .isActive(data.isActive()).isRandom(data.isRandom());\n\n                    self.get.testThemes();\n                },\n                empty: function(){\n                    self.current.test()\n                        .id(0)\n                        .subject('')\n                        .attempts(3)\n                        .timeTotal(0)\n                        .minutes('')\n                        .seconds('')\n                        .type(true)\n                        .isActive(true)\n                        .isRandom(true)\n                        .themes([]);\n                },\n                stringify: function(){\n                    var t = self.current.test();\n                    t.timeTotal(+t.minutes() * 60 + +t.seconds());\n\n                    var test = ko.mapping.toJS(self.current.test);\n\n                    delete test.minutes;\n                    delete test.seconds;\n                    delete test.themes;\n\n                    test.type = test.type ? 1 : 2;\n                    self.mode() === state.create ? delete test.id : null;\n                    \n                    return JSON.stringify({\n                        test: test,\n                        themeIds: self.multiselect.tagIds.call(self),\n                        disciplineId: self.filter.discipline().id()\n                    });\n                },\n                set: {\n                    filter: function(){\n                        var discipline = self.filter.discipline;\n                        var url = window.location.href;\n\n                        if (!discipline()){\n                            var disciplineId = +url.substr(url.lastIndexOf('/')+1);\n\n                            if (!$.isNumeric(disciplineId)) return;\n\n                            var disciplineReceived = self.current.disciplines().find(function(item){\n                                return item.id() === disciplineId;\n                            });\n                            discipline(disciplineReceived);\n                        }\n                    },\n                    random: {\n                        asTrue: function(){\n                            self.current.test().isRandom(true);\n                        },\n                        asFalse: function(){\n                            self.current.test().isRandom(false);\n                        }\n                    },\n                    type: {\n                        asTrue: function(){\n                            self.current.test().type(true);\n                        },\n                        asFalse: function(){\n                            self.current.test().type(false);\n                        }\n                    }\n                }\n            };\n\n            self.actions = {\n                show: function(data){\n                    self.current.test().id() === data.id()\n                        ? self.actions.cancel()\n                        : self.mode(state.info) && self.alter.fill(data);\n                },\n                start: {\n                    add: function(){\n                        self.mode() === state.create\n                            ? self.mode(state.none)\n                            : self.mode(state.create);\n                        self.alter.empty();\n                        self.multiselect.tags([]);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    update: function(){\n                        self.mode(state.update);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    remove: function(){\n                        self.mode(state.remove);\n                        commonHelper.modal.open(self.modals.removeTest);\n                    }\n                },\n                end: {\n                    update: function(){\n                        if (!self.current.test.isValid()){\n                            self.validation[$('[accept-validation]').attr('id')].open();\n                            return;\n                        }\n                        if (!self.multiselect.tags().length){\n                            self.validation[$('[special]').attr('id')].open();\n                            return;\n                        }\n                        self.post.test();\n                    },\n                    remove: function(){\n                        self.post.removedTest();\n                    }\n                },\n                cancel: function(){\n                    self.alter.empty();\n                    self.mode(state.none);\n                }\n            };\n\n            self.get = {\n                disciplines: function(){\n                    $ajaxget({\n                        url: '/api/disciplines/',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.disciplines(data());\n                            self.filter.set();\n                        }\n                    });\n                },\n                tests: function(){\n                    if (!self.filter.discipline()){\n                        self.current.tests([]);\n                        return;\n                    }\n                    var page = '?page=' + self.pagination.currentPage();\n                    var pageSize = '&pageSize=' + self.pagination.pageSize();\n                    var name = self.filter.name() ?'&name=' + self.filter.name() : '';\n                    var filterDiscipline = '&discipline=' + self.filter.discipline().id();\n\n                    var url = '/api/tests/show' + page + pageSize + name + filterDiscipline;\n                    $ajaxget({\n                        url: url,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.tests(data.data());\n                            self.pagination.itemsCount(data.count());\n                            self.get.themes();\n                        }\n                    });\n                },\n                themes: function(){\n                    $ajaxget({\n                        url: '/api/disciplines/' + self.filter.discipline().id() + '/themes',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.multiselect.data(data());\n                        }\n                    });\n                },\n                testThemes: function(){\n                    $ajaxget({\n                        url: '/api/tests/' + self.current.test().id() + '/themes',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.test().themes(data());\n                            self.multiselect.tags(data());\n                        }\n                    });\n                }\n            };\n            self.post = {\n                test: function(){\n                    $ajaxpost({\n                        url: '/api/tests/' + self.mode(),\n                        data: self.alter.stringify(),\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.tests();\n                        }\n                    });\n                },\n                removedTest: function(){\n                    $ajaxpost({\n                        url: '/api/tests/delete/' + self.current.test().id(),\n                        data: null,\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.tests();\n                        }\n                    });\n                }\n            };\n\n            self.get.disciplines();\n\n            //SUBSCRIPTIONS\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.get.tests();\n            });\n            self.filter.discipline.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.tests();\n            });\n            self.filter.name.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.tests();\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(testsViewModel());\n});"],"sourceRoot":"/source/"}