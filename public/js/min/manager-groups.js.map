{"version":3,"sources":["groups.js"],"names":[],"mappingsfile":"manager-groups.js","sourcesContent":["$(document).ready(function(){\n    var groupsViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.groups,\n                pagination: 10,\n                mode: true\n            });\n\n            self.initial = {\n                profileId: ko.observable(null),\n                unUrlProfileId: function(){\n                    if (self.initial.profileId()) return '&profileId=' + self.initial.profileId();\n\n                    var url = window.location.href;\n                    var id = +url.substring(url.lastIndexOf('/')+1);\n                    if ($.isNumeric(id)){\n                        self.initial.profileId(id);\n                        return '&profileId=' + id;\n                    }\n\n                    return '';\n                }\n            };\n\n            self.current = {\n                groups: ko.observableArray([]),\n                group: ko.validatedObservable({\n                    id: ko.observable(''),\n                    name: ko.observable('').extend({required: true}),\n                    prefix: ko.observable('').extend({maxLength: 15}),\n                    number: ko.observable('').extend({\n                        required: true,\n                        min: 1,\n                        number: true\n                    }),\n                    isFulltime: ko.observable(true),\n                    course: ko.observable('').extend({\n                        min: 1,\n                        required: true,\n                        number: true\n                    })\n                }),\n\n                institutes: ko.observableArray([]),\n                institute: ko.observable(null),\n\n                profiles: ko.observableArray([]),\n                profile: ko.observable(null),\n\n                plans: ko.observableArray([]),\n                plan: ko.observable(null),\n\n                groupPlan: ko.validatedObservable(null).extend({required: true}),\n                isGenerated: ko.observable(false),\n                hasInactive: ko.observable(false)\n            };\n            self.filter = {\n                name: ko.observable(''),\n                clear: function(){\n                    self.filter.name('');\n                }\n            };\n            self.alter = {\n                stringify: {\n                    group: function(){\n                        var result = {};\n\n                        var group = ko.mapping.toJS(self.current.group);\n                        if (self.mode() === state.create) delete group.id;\n\n                        result.group = group;\n                        if (self.current.groupPlan()){\n                            result.studyPlanId = self.current.groupPlan().id();\n                        }\n\n                        return JSON.stringify(result);\n                    }\n                },\n                fill: function(data){\n                    self.current.group().id(data.id()).isFulltime(data.isFulltime())\n                        .name(data.name()).prefix(data.prefix())\n                        .number(data.number()).course(data.course());\n                    self.get.inactive();\n                },\n                empty: function(){\n                    self.current.group().id('').isFulltime(true)\n                        .name('').prefix('')\n                        .number('').course('');\n                    self.current.hasInactive(false);\n                }\n            };\n            self.actions = {\n                show: function(data){\n                    if (self.mode() === state.update) {\n                        self.mode(state.info);\n                        return;\n                    }\n                    if (self.mode() === state.info && self.current.group().id() === data.id()){\n                        self.actions.cancel();\n                        return;\n                    }\n                    self.alter.fill(data);\n                    self.get.plan();\n                    self.mode(state.info);\n                },\n                start: {\n                    create: function(){\n                        self.mode() === state.create\n                            ? self.mode(state.none)\n                            : self.mode(state.create);\n                        self.alter.empty();\n                        self.current.groupPlan(null);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    update: function(){\n                        self.mode(state.update);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    remove: function(){\n                        self.mode(state.remove);\n                        commonHelper.modal.open('#remove-group-modal');\n                    }\n                },\n                end: {\n                    update: function(){\n                        if(!self.current.group.isValid()){\n                            self.validation[$('[accept-validation]').attr('id')].open();\n                            return;\n                        }\n                        if (!self.current.groupPlan.isValid()){\n                            self.validation[$('[special]').attr('id')].open();\n                            return;\n                        }\n\n                        self.post.group();\n                    },\n                    remove: function(){\n                        self.post.removal();\n                        commonHelper.modal.close('#remove-group-modal');\n                    }\n                },\n                cancel: function(){\n                    self.mode(state.none);\n                    self.alter.empty();\n                    self.current.groupPlan(null);\n                    self.current.isGenerated(false);\n                },\n                generate: function(){\n                    var g = self.current.group();\n                    var generated = g.prefix() + '-' + g.course() + g.number();\n                    generated += g.isFulltime() ? 'о' : 'з';\n                    g.name(generated);\n                    self.current.isGenerated(true);\n                },\n                moveTo: {\n                    students: function(data, e){\n                        commonHelper.cookies.create({\n                            groupId : data.id()\n                        });\n                        window.location.href = '/admin/students/' + data.id();\n                        e.stopPropagation();\n                    }\n                },\n                switchForm: {\n                    day: function(){\n                        self.current.group().isFulltime(true);\n                    },\n                    night: function(){\n                        self.current.group().isFulltime(false);\n                    }\n                },\n                selectPlan: {\n                    start: function(){\n                        self.validation[$('[special]').attr('id')].close();\n                        commonHelper.modal.open('#select-plan-modal');\n                    },\n                    cancel: function(){\n                        self.current.institute(null);\n                        commonHelper.modal.close('#select-plan-modal');\n                    },\n                    end: function(){\n                        self.current.groupPlan.copy(self.current.plan);\n                        self.actions.selectPlan.cancel();\n                    }\n                },\n                approveStudents: function(){\n                    self.confirm.show({\n                        message: 'Вы действительно хотите принять все заявки студентов группы ' +\n                        self.current.group().name(),\n                        approve: function(){self.post.students();}\n                    });\n                }\n            };\n            self.get = {\n                groups: function(){\n                    var page = '?page=' + self.pagination.currentPage();\n                    var pageSize = '&pageSize=' + self.pagination.pageSize();\n                    var name =  self.filter.name() ? '&name=' + self.filter.name() : '';\n                    var profile = self.initial.unUrlProfileId();\n\n                    var requestOptions = {\n                        url: '/api/groups/show' + page + pageSize + name + profile,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.groups(data.data());\n                            self.pagination.itemsCount(data.count());\n                        }\n                    };\n\n                    $ajaxget(requestOptions);\n                },\n                institutes: function(){\n                    var requestOptions = {\n                        url: '/api/institutes',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.institutes(data());\n                        }\n                    };\n                    $ajaxget(requestOptions);\n                },\n                profiles: function(){\n                    var requestOptions = {\n                        url: '/api/institute/' + self.current.institute().id() + '/profiles',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.profiles(data());\n                        }\n                    };\n                    $ajaxget(requestOptions);\n                },\n                plans: function(){\n                    var requestOptions = {\n                        url: '/api/profile/' + self.current.profile().id() + '/plans',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.plans(data());\n                        }\n                    };\n                    $ajaxget(requestOptions);\n                },\n                plan: function(){\n                    var requestOptions = {\n                        url: '/api/groups/' + self.current.group().id() + '/studyplan',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.groupPlan(data);\n                        }\n                    };\n                    $ajaxget(requestOptions);\n                },\n                inactive: function(){\n                    $ajaxget({\n                        url: '/api/groups/' + self.current.group().id() +'/hasUnactive',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.hasInactive(data());\n                        }\n                    })\n                }\n            };\n            self.post = {\n                group: function(){\n                    var url = self.mode() === state.create\n                        ? '/api/groups/create'\n                        : '/api/groups/update';\n                    var json = self.alter.stringify.group();\n                    var requestOptions = {\n                        url: url,\n                        errors: self.errors,\n                        data: json,\n                        successCallback: function(){\n                            self.get.groups();\n                            self.actions.cancel();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                },\n                students: function(){\n                    $ajaxpost({\n                        url: '/api/groups/acceptAll/' + self.current.group().id(),\n                        errors: self.errors,\n                        data: null,\n                        successCallback: function(){\n                            self.inform.show({message: 'Все заявки приняты'});\n                        }\n                    });\n                },\n                removal: function(){\n                    var requestOptions = {\n                        url: '/api/groups/delete/' + self.current.group().id(),\n                        errors: self.errors,\n                        data: null,\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.groups();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                }\n            };\n\n            self.current.institute.subscribe(function(value){\n                if (value){\n                    self.get.profiles();\n                    return;\n                }\n                self.current.profiles([]);\n                self.current.plans([]);\n                self.current.profile(null);\n                self.current.plan(null);\n            });\n            self.current.profile.subscribe(function(value){\n                if (value){\n                    self.get.plans();\n                    return;\n                }\n                self.current.plans([]);\n                self.current.plan(null);\n            });\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.get.groups();\n            });\n            self.filter.name.subscribe(function(){\n                self.actions.cancel();\n                self.pagination.currentPage(1);\n                self.get.groups();\n            });\n\n            self.get.institutes();\n            self.get.groups();\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(groupsViewModel());\n});"]}