{"version":3,"sources":["groups.js"],"names":[],"mappingsfile":"manager-groups.js","sourcesContent":["$(document).ready(function(){\r\n    var groupsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.groups,\r\n                pagination: 10,\r\n                mode: true\r\n            });\r\n\r\n            self.initial = {\r\n                profileId: ko.observable(null),\r\n                unUrlProfileId: function(){\r\n                    if (self.initial.profileId()) return '&profileId=' + self.initial.profileId();\r\n\r\n                    var url = window.location.href;\r\n                    var id = +url.substring(url.lastIndexOf('/')+1);\r\n                    if ($.isNumeric(id)){\r\n                        self.initial.profileId(id);\r\n                        return '&profileId=' + id;\r\n                    }\r\n\r\n                    return '';\r\n                }\r\n            };\r\n\r\n            self.current = {\r\n                groups: ko.observableArray([]),\r\n                group: ko.validatedObservable({\r\n                    id: ko.observable(''),\r\n                    name: ko.observable('').extend({required: true}),\r\n                    prefix: ko.observable('').extend({maxLength: 15}),\r\n                    number: ko.observable('').extend({\r\n                        required: true,\r\n                        min: 1,\r\n                        number: true\r\n                    }),\r\n                    isFulltime: ko.observable(true),\r\n                    course: ko.observable('').extend({\r\n                        min: 1,\r\n                        required: true,\r\n                        number: true\r\n                    })\r\n                }),\r\n\r\n                institutes: ko.observableArray([]),\r\n                institute: ko.observable(null),\r\n\r\n                profiles: ko.observableArray([]),\r\n                profile: ko.observable(null),\r\n\r\n                plans: ko.observableArray([]),\r\n                plan: ko.observable(null),\r\n\r\n                groupPlan: ko.validatedObservable(null).extend({required: true}),\r\n                isGenerated: ko.observable(false),\r\n                hasInactive: ko.observable(false)\r\n            };\r\n            self.filter = {\r\n                name: ko.observable(''),\r\n                clear: function(){\r\n                    self.filter.name('');\r\n                }\r\n            };\r\n            self.alter = {\r\n                stringify: {\r\n                    group: function(){\r\n                        var result = {};\r\n\r\n                        var group = ko.mapping.toJS(self.current.group);\r\n                        if (self.mode() === state.create) delete group.id;\r\n\r\n                        result.group = group;\r\n                        if (self.current.groupPlan()){\r\n                            result.studyPlanId = self.current.groupPlan().id();\r\n                        }\r\n\r\n                        return JSON.stringify(result);\r\n                    }\r\n                },\r\n                fill: function(data){\r\n                    self.current.group().id(data.id()).isFulltime(data.isFulltime())\r\n                        .name(data.name()).prefix(data.prefix())\r\n                        .number(data.number()).course(data.course());\r\n                    self.get.inactive();\r\n                },\r\n                empty: function(){\r\n                    self.current.group().id('').isFulltime(true)\r\n                        .name('').prefix('')\r\n                        .number('').course('');\r\n                    self.current.hasInactive(false);\r\n                }\r\n            };\r\n            self.actions = {\r\n                show: function(data){\r\n                    if (self.mode() === state.update) {\r\n                        self.mode(state.info);\r\n                        return;\r\n                    }\r\n                    if (self.mode() === state.info && self.current.group().id() === data.id()){\r\n                        self.actions.cancel();\r\n                        return;\r\n                    }\r\n                    self.alter.fill(data);\r\n                    self.get.plan();\r\n                    self.mode(state.info);\r\n                },\r\n                start: {\r\n                    create: function(){\r\n                        self.mode() === state.create\r\n                            ? self.mode(state.none)\r\n                            : self.mode(state.create);\r\n                        self.alter.empty();\r\n                        self.current.groupPlan(null);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    update: function(){\r\n                        self.mode(state.update);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    remove: function(){\r\n                        self.mode(state.remove);\r\n                        commonHelper.modal.open('#remove-group-modal');\r\n                    }\r\n                },\r\n                end: {\r\n                    update: function(){\r\n                        if(!self.current.group.isValid()){\r\n                            self.validation[$('[accept-validation]').attr('id')].open();\r\n                            return;\r\n                        }\r\n                        if (!self.current.groupPlan.isValid()){\r\n                            self.validation[$('[special]').attr('id')].open();\r\n                            return;\r\n                        }\r\n\r\n                        self.post.group();\r\n                    },\r\n                    remove: function(){\r\n                        self.post.removal();\r\n                        commonHelper.modal.close('#remove-group-modal');\r\n                    }\r\n                },\r\n                cancel: function(){\r\n                    self.mode(state.none);\r\n                    self.alter.empty();\r\n                    self.current.groupPlan(null);\r\n                    self.current.isGenerated(false);\r\n                },\r\n                generate: function(){\r\n                    var g = self.current.group();\r\n                    var generated = g.prefix() + '-' + g.course() + g.number();\r\n                    generated += g.isFulltime() ? 'о' : 'з';\r\n                    g.name(generated);\r\n                    self.current.isGenerated(true);\r\n                },\r\n                moveTo: {\r\n                    students: function(data, e){\r\n                        commonHelper.cookies.create({\r\n                            groupId : data.id()\r\n                        });\r\n                        window.location.href = '/admin/students/' + data.id();\r\n                        e.stopPropagation();\r\n                    }\r\n                },\r\n                switchForm: {\r\n                    day: function(){\r\n                        self.current.group().isFulltime(true);\r\n                    },\r\n                    night: function(){\r\n                        self.current.group().isFulltime(false);\r\n                    }\r\n                },\r\n                selectPlan: {\r\n                    start: function(){\r\n                        self.validation[$('[special]').attr('id')].close();\r\n                        commonHelper.modal.open('#select-plan-modal');\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.institute(null);\r\n                        commonHelper.modal.close('#select-plan-modal');\r\n                    },\r\n                    end: function(){\r\n                        self.current.groupPlan.copy(self.current.plan);\r\n                        self.actions.selectPlan.cancel();\r\n                    }\r\n                },\r\n                approveStudents: function(){\r\n                    self.confirm.show({\r\n                        message: 'Вы действительно хотите принять все заявки студентов группы ' +\r\n                        self.current.group().name(),\r\n                        approve: function(){self.post.students();}\r\n                    });\r\n                }\r\n            };\r\n            self.get = {\r\n                groups: function(){\r\n                    var page = '?page=' + self.pagination.currentPage();\r\n                    var pageSize = '&pageSize=' + self.pagination.pageSize();\r\n                    var name =  self.filter.name() ? '&name=' + self.filter.name() : '';\r\n                    var profile = self.initial.unUrlProfileId();\r\n\r\n                    var requestOptions = {\r\n                        url: '/api/groups/show' + page + pageSize + name + profile,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.groups(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                        }\r\n                    };\r\n\r\n                    $ajaxget(requestOptions);\r\n                },\r\n                institutes: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/institutes',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.institutes(data());\r\n                        }\r\n                    };\r\n                    $ajaxget(requestOptions);\r\n                },\r\n                profiles: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/institute/' + self.current.institute().id() + '/profiles',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.profiles(data());\r\n                        }\r\n                    };\r\n                    $ajaxget(requestOptions);\r\n                },\r\n                plans: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/profile/' + self.current.profile().id() + '/plans',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.plans(data());\r\n                        }\r\n                    };\r\n                    $ajaxget(requestOptions);\r\n                },\r\n                plan: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/groups/' + self.current.group().id() + '/studyplan',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.groupPlan(data);\r\n                        }\r\n                    };\r\n                    $ajaxget(requestOptions);\r\n                },\r\n                inactive: function(){\r\n                    $ajaxget({\r\n                        url: '/api/groups/' + self.current.group().id() +'/hasUnactive',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.hasInactive(data());\r\n                        }\r\n                    })\r\n                }\r\n            };\r\n            self.post = {\r\n                group: function(){\r\n                    var url = self.mode() === state.create\r\n                        ? '/api/groups/create'\r\n                        : '/api/groups/update';\r\n                    var json = self.alter.stringify.group();\r\n                    var requestOptions = {\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        data: json,\r\n                        successCallback: function(){\r\n                            self.get.groups();\r\n                            self.actions.cancel();\r\n                        }\r\n                    };\r\n                    $ajaxpost(requestOptions);\r\n                },\r\n                students: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/groups/acceptAll/' + self.current.group().id(),\r\n                        errors: self.errors,\r\n                        data: null,\r\n                        successCallback: function(){\r\n                            self.inform.show({message: 'Все заявки приняты'});\r\n                        }\r\n                    });\r\n                },\r\n                removal: function(){\r\n                    var requestOptions = {\r\n                        url: '/api/groups/delete/' + self.current.group().id(),\r\n                        errors: self.errors,\r\n                        data: null,\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.groups();\r\n                        }\r\n                    };\r\n                    $ajaxpost(requestOptions);\r\n                }\r\n            };\r\n\r\n            self.current.institute.subscribe(function(value){\r\n                if (value){\r\n                    self.get.profiles();\r\n                    return;\r\n                }\r\n                self.current.profiles([]);\r\n                self.current.plans([]);\r\n                self.current.profile(null);\r\n                self.current.plan(null);\r\n            });\r\n            self.current.profile.subscribe(function(value){\r\n                if (value){\r\n                    self.get.plans();\r\n                    return;\r\n                }\r\n                self.current.plans([]);\r\n                self.current.plan(null);\r\n            });\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.get.groups();\r\n            });\r\n            self.filter.name.subscribe(function(){\r\n                self.actions.cancel();\r\n                self.pagination.currentPage(1);\r\n                self.get.groups();\r\n            });\r\n\r\n            self.get.institutes();\r\n            self.get.groups();\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(groupsViewModel());\r\n});"]}