{"version":3,"sources":["ko-progressbar.js","monitoring.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"manager-monitoring.js","sourcesContent":["ko.bindingHandlers.progressBar = {\r\n    init: function(element) {\r\n        return { controlsDescendantBindings: true };\r\n    },\r\n    update : function(element, valueAccessor, bindingContext) {\r\n        var options = ko.unwrap(valueAccessor());\r\n\r\n        var value = options.value();\r\n\r\n        var width = value + \"%\";\r\n\r\n        $(element).addClass(\"progressBar\");\r\n\r\n        ko.applyBindingsToNode(element, {\r\n            html : '<div data-bind=\"style: { width: \\'' + width + '\\' }\"></div><div class=\"progressText\" data-bind=\"text: \\'' + value + ' %\\'\"></div>'\r\n        });\r\n\r\n        ko.applyBindingsToDescendants(bindingContext, element);\r\n    }\r\n};","$(document).ready(function(){\r\n    var monitoringViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.results\r\n            });\r\n\r\n            self.initial = {\r\n                settings: ko.observable(null)\r\n            };\r\n            self.current = {\r\n                results: ko.observableArray([]),\r\n                refreshTime: ko.observable(interval.thirtysec)\r\n            };\r\n            self.filter = {\r\n                profile: ko.observable(),\r\n                discipline: ko.observable(),\r\n                group: ko.observable(),\r\n                test: ko.observable(),\r\n                state: ko.observable('any'),\r\n                interval: ko.observable(interval.thirtysec),\r\n\r\n                profiles: ko.observableArray([]),\r\n                disciplines: ko.observableArray([]),\r\n                groups: ko.observableArray([]),\r\n                tests: ko.observableArray([]),\r\n\r\n                set: {\r\n                    profile: function(){\r\n                        if (!self.initial.settings()) return;\r\n                        var id = self.initial.settings().monitoring_profile;\r\n                        if (!id) return;\r\n                        $.each(self.filter.profiles(), function(i, item){\r\n                            if (item.id() == id()){\r\n                                self.filter.profile(item);\r\n                            }\r\n                        });\r\n                    },\r\n                    discipline: function(){\r\n                        if (!self.initial.settings()) return;\r\n                        var id = self.initial.settings().monitoring_discipline;\r\n                        if (!id) return;\r\n                        $.each(self.filter.disciplines(), function(i, item){\r\n                            if (item.id() == id()){\r\n                                self.filter.discipline(item);\r\n                            }\r\n                        });\r\n                    },\r\n                    group: function(){\r\n                        if (!self.initial.settings()) return;\r\n                        var id = self.initial.settings().monitoring_group;\r\n                        if (!id) return;\r\n                        $.each(self.filter.groups(), function(i, item){\r\n                            if (item.id() == id()){\r\n                                self.filter.group(item);\r\n                            }\r\n                        });\r\n                    },\r\n                    test: function(){\r\n                        if (!self.initial.settings()) return;\r\n                        var id = self.initial.settings().monitoring_test;\r\n                        if (!id) return;\r\n                        $.each(self.filter.tests(), function(i, item){\r\n                            if (item.id() == id()){\r\n                                self.filter.test(item);\r\n                            }\r\n                        });\r\n                    },\r\n                    state: function(){\r\n                        self.filter.state('any');\r\n                        if (!self.initial.settings()) return;\r\n                        var value = self.initial.settings().monitoring_state;\r\n                        if (!value()) return;\r\n                        if (value() === 'any' ||\r\n                            value() === 'process' ||\r\n                            value() === 'finished')\r\n                            self.filter.state(value());\r\n                    },\r\n                    interval: function(){\r\n                        self.filter.interval(interval.thirtysec);\r\n                        if (!self.initial.settings()) return;\r\n                        var value = self.initial.settings().monitoring_interval;\r\n                        if (!value) return;\r\n                        if ($.isNumeric(value())) self.filter.interval(value());\r\n                    }\r\n                },\r\n                get: {\r\n                  state: function(){\r\n                      switch (self.filter.state()){\r\n                          case 'any':\r\n                              return null;\r\n                              break;\r\n                          case 'process':\r\n                              return 1;\r\n                              break;\r\n                          case 'finished':\r\n                              return 2;\r\n                              break;\r\n                      }\r\n                  }\r\n                },\r\n                clear: function(){\r\n                    self.filter.profile(null);\r\n                    self.filter.state('any');\r\n                    self.filter.interval(interval.thirtysec);\r\n                }\r\n            };\r\n\r\n\r\n            self.actions = {\r\n                setInterval: function(data, e){\r\n                    self.filter.interval(+$(e.target).attr('secs'));\r\n                }\r\n            };\r\n\r\n            self.get = {\r\n                settings: function(){\r\n                    var json = JSON.stringify({\r\n                        settings: [\r\n                            \"monitoring_profile\",\r\n                            \"monitoring_discipline\",\r\n                            \"monitoring_group\",\r\n                            \"monitoring_test\",\r\n                            \"monitoring_state\",\r\n                            \"monitoring_interval\"\r\n                        ]\r\n                    });\r\n                    var callback = function(){\r\n                        self.get.profiles();\r\n                        self.filter.set.state();\r\n                        self.filter.set.interval();\r\n                    };\r\n                    $ajaxpost({\r\n                        url: '/api/uisettings/get',\r\n                        data: json,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.initial.settings(data);\r\n                            callback();\r\n                        },\r\n                        errorCallback: function(){\r\n                            self.initial.settings(null);\r\n                            callback();\r\n                        }\r\n                    });\r\n                },\r\n                profiles: function(){\r\n                    $ajaxget({\r\n                        url: '/api/profiles',\r\n                        errors: self.errors,\r\n                        successCallback:function(data){\r\n                            self.filter.profiles(data());\r\n                            self.filter.set.profile();\r\n                        }\r\n                    });\r\n                },\r\n                disciplines: function(){\r\n                    $ajaxget({\r\n                        url: '/api/profile/'+ self.filter.profile().id() +'/disciplines',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.filter.disciplines(data());\r\n                            self.filter.set.discipline();\r\n                        }\r\n                    });\r\n                },\r\n                groups: function(){\r\n                    $ajaxget({\r\n                        url: '/api/profile/'+ self.filter.profile().id() +'/groups',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.filter.groups(data());\r\n                            self.filter.set.group();\r\n                        }\r\n                    });\r\n                },\r\n                tests: function(){\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/' + self.filter.discipline().id()+ '/tests',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.filter.tests(data());\r\n                            self.filter.set.test();\r\n                        }\r\n                    });\r\n                },\r\n                results: function(){\r\n                    var test = self.filter.test() ? '?testId=' + self.filter.test().id() : '';\r\n                    var group = self.filter.group() ? '&groupId=' + self.filter.group().id() : '';\r\n                    var state = self.filter.get.state() ? '&state=' + self.filter.get.state() : '';\r\n\r\n                    $ajaxget({\r\n                        url:  '/api/tests/sessions' + test + group + state,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.results(data());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.post = {\r\n                settings: function(settings){\r\n                    $ajaxpost({\r\n                        url: '/api/uisettings/set',\r\n                        errors: self.errors,\r\n                        data: JSON.stringify({\r\n                            settings: settings\r\n                        })\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get.settings();\r\n\r\n            //SUBSCRIPTIONS\r\n\r\n            self.filter.profile.subscribe(function(value){\r\n                if (value){\r\n                    self.post.settings({'monitoring_profile': self.filter.profile().id()});\r\n                    self.get.groups();\r\n                    self.get.disciplines();\r\n                    return;\r\n                }\r\n                self.filter\r\n                    .disciplines([])\r\n                    .discipline(null)\r\n                    .groups([])\r\n                    .group(null);\r\n                self.post.settings({'monitoring_profile': null});\r\n            });\r\n            self.filter.discipline.subscribe(function(value){\r\n                if (value){\r\n                    self.post.settings({'monitoring_discipline': self.filter.discipline().id()});\r\n                    self.get.tests();\r\n                    return;\r\n                }\r\n                self.filter.tests([]);\r\n                self.post.settings({'monitoring_discipline': null});\r\n            });\r\n            self.filter.group.subscribe(function(value){\r\n                if (value){\r\n                    self.post.settings({'monitoring_group': self.filter.group().id()});\r\n                    return;\r\n                }\r\n                self.post.settings({'monitoring_group': null});\r\n            });\r\n            self.filter.test.subscribe(function(value){\r\n                if (value){\r\n                    self.post.settings({'monitoring_test': self.filter.test().id()});\r\n                    self.get.results();\r\n                    return;\r\n                }\r\n                self.current.results([]);\r\n                self.post.settings({'monitoring_test': null});\r\n            });\r\n            self.filter.state.subscribe(function(){\r\n                self.post.settings({'monitoring_state': self.filter.state()});\r\n                self.get.results();\r\n            });\r\n\r\n            //TIMER\r\n            var timer;\r\n            self.filter.interval.subscribe(function(value){\r\n                self.post.settings({'monitoring_interval': self.filter.interval()});\r\n\r\n                if (timer) clearInterval(timer);\r\n                if ($.isNumeric(value)) self.current.refreshTime(value);\r\n                timer = setInterval(function(){\r\n                    var time = self.current.refreshTime() - 1000;\r\n                    self.current.refreshTime(time);\r\n                }, 1000);\r\n            });\r\n            self.current.refreshTime.subscribe(function(value){\r\n                if (value) return;\r\n                self.get.results();\r\n                self.current.refreshTime(self.filter.interval());\r\n            });\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(monitoringViewModel());\r\n});"]}