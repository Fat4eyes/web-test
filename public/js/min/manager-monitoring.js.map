{"version":3,"sources":["ko-progressbar.js","monitoring.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"manager-monitoring.js","sourcesContent":["ko.bindingHandlers.progressBar = {\n    init: function(element) {\n        return { controlsDescendantBindings: true };\n    },\n    update : function(element, valueAccessor, bindingContext) {\n        var options = ko.unwrap(valueAccessor());\n\n        var value = options.value();\n\n        var width = value + \"%\";\n\n        $(element).addClass(\"progressBar\");\n\n        ko.applyBindingsToNode(element, {\n            html : '<div data-bind=\"style: { width: \\'' + width + '\\' }\"></div><div class=\"progressText\" data-bind=\"text: \\'' + value + ' %\\'\"></div>'\n        });\n\n        ko.applyBindingsToDescendants(bindingContext, element);\n    }\n};","$(document).ready(function(){\n    var monitoringViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.results\n            });\n\n            self.initial = {\n                settings: ko.observable(null)\n            };\n            self.current = {\n                results: ko.observableArray([]),\n                refreshTime: ko.observable(interval.thirtysec)\n            };\n            self.filter = {\n                profile: ko.observable(),\n                discipline: ko.observable(),\n                group: ko.observable(),\n                test: ko.observable(),\n                state: ko.observable('any'),\n                interval: ko.observable(interval.thirtysec),\n\n                profiles: ko.observableArray([]),\n                disciplines: ko.observableArray([]),\n                groups: ko.observableArray([]),\n                tests: ko.observableArray([]),\n\n                set: {\n                    profile: function(){\n                        if (!self.initial.settings()) return;\n                        var id = self.initial.settings().monitoring_profile;\n                        if (!id) return;\n                        $.each(self.filter.profiles(), function(i, item){\n                            if (item.id() == id()){\n                                self.filter.profile(item);\n                            }\n                        });\n                    },\n                    discipline: function(){\n                        if (!self.initial.settings()) return;\n                        var id = self.initial.settings().monitoring_discipline;\n                        if (!id) return;\n                        $.each(self.filter.disciplines(), function(i, item){\n                            if (item.id() == id()){\n                                self.filter.discipline(item);\n                            }\n                        });\n                    },\n                    group: function(){\n                        if (!self.initial.settings()) return;\n                        var id = self.initial.settings().monitoring_group;\n                        if (!id) return;\n                        $.each(self.filter.groups(), function(i, item){\n                            if (item.id() == id()){\n                                self.filter.group(item);\n                            }\n                        });\n                    },\n                    test: function(){\n                        if (!self.initial.settings()) return;\n                        var id = self.initial.settings().monitoring_test;\n                        if (!id) return;\n                        $.each(self.filter.tests(), function(i, item){\n                            if (item.id() == id()){\n                                self.filter.test(item);\n                            }\n                        });\n                    },\n                    state: function(){\n                        self.filter.state('any');\n                        if (!self.initial.settings()) return;\n                        var value = self.initial.settings().monitoring_state;\n                        if (!value()) return;\n                        if (value() === 'any' ||\n                            value() === 'process' ||\n                            value() === 'finished')\n                            self.filter.state(value());\n                    },\n                    interval: function(){\n                        self.filter.interval(interval.thirtysec);\n                        if (!self.initial.settings()) return;\n                        var value = self.initial.settings().monitoring_interval;\n                        if (!value) return;\n                        if ($.isNumeric(value())) self.filter.interval(value());\n                    }\n                },\n                get: {\n                  state: function(){\n                      switch (self.filter.state()){\n                          case 'any':\n                              return null;\n                              break;\n                          case 'process':\n                              return 1;\n                              break;\n                          case 'finished':\n                              return 2;\n                              break;\n                      }\n                  }\n                },\n                clear: function(){\n                    self.filter.profile(null);\n                    self.filter.state('any');\n                    self.filter.interval(interval.thirtysec);\n                }\n            };\n\n\n            self.actions = {\n                setInterval: function(data, e){\n                    self.filter.interval(+$(e.target).attr('secs'));\n                }\n            };\n\n            self.get = {\n                settings: function(){\n                    var json = JSON.stringify({\n                        settings: [\n                            \"monitoring_profile\",\n                            \"monitoring_discipline\",\n                            \"monitoring_group\",\n                            \"monitoring_test\",\n                            \"monitoring_state\",\n                            \"monitoring_interval\"\n                        ]\n                    });\n                    var callback = function(){\n                        self.get.profiles();\n                        self.filter.set.state();\n                        self.filter.set.interval();\n                    };\n                    $ajaxpost({\n                        url: '/api/uisettings/get',\n                        data: json,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.initial.settings(data);\n                            callback();\n                        },\n                        errorCallback: function(){\n                            self.initial.settings(null);\n                            callback();\n                        }\n                    });\n                },\n                profiles: function(){\n                    $ajaxget({\n                        url: '/api/profiles',\n                        errors: self.errors,\n                        successCallback:function(data){\n                            self.filter.profiles(data());\n                            self.filter.set.profile();\n                        }\n                    });\n                },\n                disciplines: function(){\n                    $ajaxget({\n                        url: '/api/profile/'+ self.filter.profile().id() +'/disciplines',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.filter.disciplines(data());\n                            self.filter.set.discipline();\n                        }\n                    });\n                },\n                groups: function(){\n                    $ajaxget({\n                        url: '/api/profile/'+ self.filter.profile().id() +'/groups',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.filter.groups(data());\n                            self.filter.set.group();\n                        }\n                    });\n                },\n                tests: function(){\n                    $ajaxget({\n                        url: '/api/disciplines/' + self.filter.discipline().id()+ '/tests',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.filter.tests(data());\n                            self.filter.set.test();\n                        }\n                    });\n                },\n                results: function(){\n                    var test = self.filter.test() ? '?testId=' + self.filter.test().id() : '';\n                    var group = self.filter.group() ? '&groupId=' + self.filter.group().id() : '';\n                    var state = self.filter.get.state() ? '&state=' + self.filter.get.state() : '';\n\n                    $ajaxget({\n                        url:  '/api/tests/sessions' + test + group + state,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.results(data());\n                        }\n                    });\n                }\n            };\n\n            self.post = {\n                settings: function(settings){\n                    $ajaxpost({\n                        url: '/api/uisettings/set',\n                        errors: self.errors,\n                        data: JSON.stringify({\n                            settings: settings\n                        })\n                    });\n                }\n            };\n\n            self.get.settings();\n\n            //SUBSCRIPTIONS\n\n            self.filter.profile.subscribe(function(value){\n                if (value){\n                    self.post.settings({'monitoring_profile': self.filter.profile().id()});\n                    self.get.groups();\n                    self.get.disciplines();\n                    return;\n                }\n                self.filter\n                    .disciplines([])\n                    .discipline(null)\n                    .groups([])\n                    .group(null);\n                self.post.settings({'monitoring_profile': null});\n            });\n            self.filter.discipline.subscribe(function(value){\n                if (value){\n                    self.post.settings({'monitoring_discipline': self.filter.discipline().id()});\n                    self.get.tests();\n                    return;\n                }\n                self.filter.tests([]);\n                self.post.settings({'monitoring_discipline': null});\n            });\n            self.filter.group.subscribe(function(value){\n                if (value){\n                    self.post.settings({'monitoring_group': self.filter.group().id()});\n                    return;\n                }\n                self.post.settings({'monitoring_group': null});\n            });\n            self.filter.test.subscribe(function(value){\n                if (value){\n                    self.post.settings({'monitoring_test': self.filter.test().id()});\n                    self.get.results();\n                    return;\n                }\n                self.current.results([]);\n                self.post.settings({'monitoring_test': null});\n            });\n            self.filter.state.subscribe(function(){\n                self.post.settings({'monitoring_state': self.filter.state()});\n                self.get.results();\n            });\n\n            //TIMER\n            var timer;\n            self.filter.interval.subscribe(function(value){\n                self.post.settings({'monitoring_interval': self.filter.interval()});\n\n                if (timer) clearInterval(timer);\n                if ($.isNumeric(value)) self.current.refreshTime(value);\n                timer = setInterval(function(){\n                    var time = self.current.refreshTime() - 1000;\n                    self.current.refreshTime(time);\n                }, 1000);\n            });\n            self.current.refreshTime.subscribe(function(value){\n                if (value) return;\n                self.get.results();\n                self.current.refreshTime(self.filter.interval());\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(monitoringViewModel());\n});"],"sourceRoot":"/source/"}