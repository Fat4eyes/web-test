{"version":3,"sources":["result.js"],"names":[],"mappingsfile":"manager-result.js","sourcesContent":["$(document).ready(function(){\n\n    var themeViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.results\n            });\n\n            self.current = {\n                result: ko.observable(),\n                results: ko.observableArray([]),\n                test: ko.observable(),\n                attempts: ko.observable(),\n                extraAttempts: {\n                    count: ko.observable(0).extend({\n                        required: true,\n                        min: 0,\n                        max: 1000,\n                        digit: true\n                    }),\n                    mode: ko.observable(state.none)\n                },\n                answers: ko.observableArray([]),\n                answer: ko.observable({\n                    id: ko.observable(0),\n                    answer: ko.observable(),\n                    question: ko.observable({\n                        text: ko.observable()\n                    }),\n                    rightPercentage: ko.observable()\n                }),\n                mark: {\n                    isInput: ko.observable(false),\n                    value: ko.validatedObservable('Оценить').extend({\n                        required: true,\n                        digit: true,\n                        min: 0,\n                        max: 100\n                    })\n                },\n                markScale: ko.observable(100)\n            };\n            self.actions = {\n                answer: {\n                    show: function(data){\n                        self.current.answer().id() === data.id() ?\n                            self.current.answer().id(0) :\n                            self.alter.fill.answer(data);\n                        self.current.mark.isInput(false);\n                    },\n\n                    fit: {\n                        question: function(data){\n                            var q = data.question.text();\n                            return commonHelper.shortenText(q, 100);\n                        }\n                    }\n                },\n                mark: {\n                    edit: function(data){\n                        self.current.mark.isInput(true);\n                        self.current.mark.value('');\n                        if (data.rightPercentage()){\n                            self.current.mark.value(data.rightPercentage());\n                        }\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    approve: function(data){\n                        var value = self.current.mark.value;\n                        if (!value.isValid()) return;\n                        data.rightPercentage(value());\n                        self.post.mark(data.id(), value());\n                        self.current.mark.isInput(false);\n                        value('Оценить');\n                    },\n                    cancel: function(){\n                        self.current.mark.isInput(false);\n                        self.current.mark.value('Оценить');\n                    }\n                },\n                results: {\n                    view: function(){\n                        commonHelper.modal.open('#attempts-modal');\n                    },\n                    select: function(data){\n                        commonHelper.modal.close('#attempts-modal');\n                        window.location.href = '/admin/result/' + data.id();\n                    }\n                },\n                attempts: {\n                    start: function(){\n                        self.get.attempts();\n                        self.current.extraAttempts.mode(state.update);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    end: function(){\n                        if (!self.current.extraAttempts.count.isValid()) return;\n                        self.post.attempts();\n                    },\n                    cancel: function(){\n                        self.current.extraAttempts\n                            .mode(state.none).count(0);\n                    }\n                }\n            };\n\n            self.alter = {\n                fill: {\n                    answer: function(d){\n                        self.current.answer()\n                            .id(d.id())\n                            .answer(d.answer())\n                            .question(d.question)\n                            .rightPercentage(d.rightPercentage());\n                    }\n                }\n            };\n\n            self.get = {\n                result: function(){\n                    var url = window.location.href;\n                    var id = +url.substr(url.lastIndexOf('/')+1);\n\n                    $ajaxget({\n                        url: '/api/results/' + id,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.answers(data.answers());\n                            self.current.result(data.testResult);\n                            self.current.attempts(data.attemptsAllowed());\n                            self.current.test(data.test);\n                            self.get.results();\n                        }\n                    });\n                },\n                results: function(){\n                    var result = self.current.result();\n                    var user = result.user.id();\n                    var test = result.testId();\n\n                    $ajaxget({\n                        url: '/api/results/getByUserAndTest?userId='+ user + '&testId=' + test,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.results(data());\n                            commonHelper.tooltip({selector: '.tagged', side: 'left'});\n                        }\n                    });\n                },\n                attempts: function(){\n                    var user = '?userId=' + self.current.result().user.id();\n                    var test = '&testId=' + self.current.result().testId();\n\n                    $ajaxget({\n                        url: '/api/attempts/get' + user + test,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.extraAttempts.count(data());\n                        }\n                    });\n                },\n                markScale: function(){\n                    $ajaxget({\n                        url: '/api/settings/get/maxMarkValue',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.markScale(data.value());\n                        }\n                    });\n                }\n            };\n            self.post = {\n                mark: function(id, mark){\n                    $ajaxpost({\n                        url: '/api/results/setMark',\n                        data: JSON.stringify({answerId: id, mark: mark}),\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.get.result();\n                        }\n                    });\n                },\n                attempts: function(){\n                    var json = JSON.stringify({\n                        testId: self.current.result().testId(),\n                        userId: self.current.result().user.id(),\n                        count: self.current.extraAttempts.count()\n                    });\n                    $ajaxpost({\n                        url: '/api/attempts/set',\n                        errors: self.errors,\n                        data: json,\n                        successCallback: function(){\n                            self.actions.attempts.cancel();\n                            self.get.result();\n                        }\n                    });\n                }\n            };\n\n            self.get.result();\n            self.get.markScale();\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(themeViewModel());\n});\n"],"sourceRoot":"/source/"}