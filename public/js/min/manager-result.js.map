{"version":3,"sources":["result.js"],"names":[],"mappingsfile":"manager-result.js","sourcesContent":["$(document).ready(function(){\r\n\r\n    var themeViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.results\r\n            });\r\n\r\n            self.current = {\r\n                result: ko.observable(),\r\n                results: ko.observableArray([]),\r\n                test: ko.observable(),\r\n                attempts: ko.observable(),\r\n                extraAttempts: {\r\n                    count: ko.observable(0).extend({\r\n                        required: true,\r\n                        min: 0,\r\n                        max: 1000,\r\n                        digit: true\r\n                    }),\r\n                    mode: ko.observable(state.none)\r\n                },\r\n                answers: ko.observableArray([]),\r\n                answer: ko.observable({\r\n                    id: ko.observable(0),\r\n                    answer: ko.observable(),\r\n                    question: ko.observable({\r\n                        text: ko.observable()\r\n                    }),\r\n                    rightPercentage: ko.observable()\r\n                }),\r\n                mark: {\r\n                    isInput: ko.observable(false),\r\n                    value: ko.validatedObservable('Оценить').extend({\r\n                        required: true,\r\n                        digit: true,\r\n                        min: 0,\r\n                        max: 100\r\n                    })\r\n                },\r\n                markScale: ko.observable(100)\r\n            };\r\n            self.actions = {\r\n                answer: {\r\n                    show: function(data){\r\n                        self.current.answer().id() === data.id() ?\r\n                            self.current.answer().id(0) :\r\n                            self.alter.fill.answer(data);\r\n                        self.current.mark.isInput(false);\r\n                    },\r\n\r\n                    fit: {\r\n                        question: function(data){\r\n                            var q = data.question.text();\r\n                            return commonHelper.shortenText(q, 100);\r\n                        }\r\n                    },\r\n\r\n                    details: function(){\r\n                        commonHelper.modal.open('#details-modal');\r\n                    }\r\n\r\n                },\r\n                mark: {\r\n                    edit: function(data){\r\n                        self.current.mark.isInput(true);\r\n                        self.current.mark.value('');\r\n                        if (data.rightPercentage()){\r\n                            self.current.mark.value(data.rightPercentage());\r\n                        }\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    approve: function(data){\r\n                        var value = self.current.mark.value;\r\n                        if (!value.isValid()) return;\r\n                        data.rightPercentage(value());\r\n                        self.post.mark(data.id(), value());\r\n                        self.current.mark.isInput(false);\r\n                        value('Оценить');\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.mark.isInput(false);\r\n                        self.current.mark.value('Оценить');\r\n                    }\r\n                },\r\n                results: {\r\n                    view: function(){\r\n                        commonHelper.modal.open('#attempts-modal');\r\n                    },\r\n                    select: function(data){\r\n                        commonHelper.modal.close('#attempts-modal');\r\n                        window.location.href = '/admin/result/' + data.id();\r\n                    }\r\n                },\r\n                attempts: {\r\n                    start: function(){\r\n                        self.get.attempts();\r\n                        self.current.extraAttempts.mode(state.update);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    end: function(){\r\n                        if (!self.current.extraAttempts.count.isValid()) return;\r\n                        self.post.attempts();\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.extraAttempts\r\n                            .mode(state.none).count(0);\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.alter = {\r\n                fill: {\r\n                    answer: function(d){\r\n                        self.current.answer()\r\n                            .id(d.id())\r\n                            .answer(d.answer())\r\n                            .question(d.question)\r\n                            .rightPercentage(d.rightPercentage());\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.get = {\r\n                result: function(){\r\n                    var url = window.location.href;\r\n                    var id = +url.substr(url.lastIndexOf('/')+1);\r\n\r\n                    $ajaxget({\r\n                        url: '/api/results/' + id,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.answers(data.answers());\r\n                            self.current.result(data.testResult);\r\n                            self.current.attempts(data.attemptsAllowed());\r\n                            self.current.test(data.test);\r\n                            self.get.results();\r\n                        }\r\n                    });\r\n                },\r\n                results: function(){\r\n                    var result = self.current.result();\r\n                    var user = result.user.id();\r\n                    var test = result.testId();\r\n\r\n                    $ajaxget({\r\n                        url: '/api/results/getByUserAndTest?userId='+ user + '&testId=' + test,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.results(data());\r\n                            commonHelper.tooltip({selector: '.tagged', side: 'left'});\r\n                        }\r\n                    });\r\n                },\r\n                attempts: function(){\r\n                    var user = '?userId=' + self.current.result().user.id();\r\n                    var test = '&testId=' + self.current.result().testId();\r\n\r\n                    $ajaxget({\r\n                        url: '/api/attempts/get' + user + test,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.extraAttempts.count(data());\r\n                        }\r\n                    });\r\n                },\r\n                markScale: function(){\r\n                    $ajaxget({\r\n                        url: '/api/settings/get/maxMarkValue',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.markScale(data.value());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            self.post = {\r\n                mark: function(id, mark){\r\n                    $ajaxpost({\r\n                        url: '/api/results/setMark',\r\n                        data: JSON.stringify({answerId: id, mark: mark}),\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.get.result();\r\n                        }\r\n                    });\r\n                },\r\n                attempts: function(){\r\n                    var json = JSON.stringify({\r\n                        testId: self.current.result().testId(),\r\n                        userId: self.current.result().user.id(),\r\n                        count: self.current.extraAttempts.count()\r\n                    });\r\n                    $ajaxpost({\r\n                        url: '/api/attempts/set',\r\n                        errors: self.errors,\r\n                        data: json,\r\n                        successCallback: function(){\r\n                            self.actions.attempts.cancel();\r\n                            self.get.result();\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get.result();\r\n            self.get.markScale();\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(themeViewModel());\r\n});\r\n"]}