{"version":3,"sources":["materials.js"],"names":[],"mappingsfile":"student-materials.js","sourcesContent":["$(document).ready(function(){\r\n    var materialsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.student.materials,\r\n                mode: true,\r\n                pagination: 5,\r\n                multiselect: true\r\n            });\r\n\r\n            self.modals = {\r\n                multimedia: '#multimedia-modal'\r\n            };\r\n\r\n            self.current = {\r\n                disciplines: ko.observableArray([]),\r\n                discipline: ko.validatedObservable({\r\n                    id: ko.observable(0),\r\n                    name: ko.observable('').extend({\r\n                        required: true,\r\n                        maxLength: 200\r\n                    }),\r\n                    abbreviation: ko.observable('').extend({\r\n                        required: true,\r\n                        maxLength: 50\r\n                    }),\r\n                    description: ko.observable('')\r\n                }),\r\n                themes: ko.observableArray([]),\r\n                theme: ko.observable({\r\n                    id: ko.observable(0),\r\n                    name: ko.observable(''),\r\n                    mode: ko.observable(state.none)\r\n                }),\r\n                medias: ko.observableArray([]),\r\n                multimedias: ko.observableArray([]),\r\n                others: ko.observableArray([]),\r\n                media: ko.observable({\r\n                    id: ko.observable(0),\r\n                    type: ko.observable(''),\r\n                    content: ko.observable(''),\r\n                    path: ko.observable(''),\r\n                    name: ko.observable(''),\r\n                    hash: ko.observable(''),\r\n                    start: ko.observable(null),\r\n                    stop: ko.observable(null)\r\n                }),\r\n                multimediaURL: ko.observable(''),\r\n                tests: ko.observableArray([])\r\n            };\r\n\r\n            self.filter = {\r\n                discipline: ko.observable(''),\r\n                profile : ko.observable(),\r\n                clear: function(){\r\n                    self.filter.discipline('').profile(null);\r\n                }\r\n            };\r\n\r\n            self.actions = {\r\n                discipline: {\r\n                    show: function(data){\r\n                        if (self.mode() === state.none ||\r\n                            self.current.discipline().id() !== data.id()){\r\n                            self.mode(state.overall);\r\n                            self.alter.discipline.fill(data);\r\n                            self.get.disciplineProfiles();\r\n                            self.get.disciplineMedias(data.id());\r\n                            self.get.tests();\r\n                            return;\r\n                        }\r\n                        self.actions.discipline.cancel();\r\n                    },\r\n                    cancel: function(){\r\n                        self.mode(state.none);\r\n                        self.alter.discipline.empty();\r\n                    },\r\n                    // вывод всех файлов дисциплины\r\n                    overall: function (data) {\r\n                        if (self.mode() != state.overall){\r\n                            self.mode(state.overall);\r\n                            self.current.theme().id(0);\r\n                            self.get.disciplineMedias(data.id());\r\n                        }\r\n                    },\r\n                    // вывод всех тем дисциплины\r\n                    themes: function () {\r\n                        if (self.mode() != state.themes){\r\n                            self.mode(state.themes);\r\n                            self.get.themes();\r\n                        }\r\n                    }\r\n                },\r\n                theme: {\r\n                    cancel: function(){\r\n                        self.current.theme()\r\n                            .id(0);\r\n                        self.multiselect.tags([]);\r\n                    },\r\n                    // вывод файлов темы\r\n                    materials: function (data) {\r\n                        if (self.current.theme().id() !== data.id()){\r\n                            self.mode(state.materials);\r\n                            self.current.theme().id(data.id());\r\n                            self.get.themeMedias(data.id());\r\n                            return;\r\n                        }\r\n                        self.actions.theme.cancel();\r\n                    }\r\n                },\r\n                media: {\r\n                    move: function (data) {\r\n                        self.alter.media.fill(data);\r\n                        if (data.type() == 'text') {\r\n                            if (data.start() != null) window.open('/media/' + data.id() + '#' + data.start());\r\n                            else window.open('/media/' + data.id());\r\n                        }\r\n                        else  if (data.type() == 'audio' || data.type() == 'video') {\r\n                            self.actions.multimedia.open(data);\r\n                        }\r\n                        else window.open(self.helpers.getEncodedUrl(data));\r\n                    }\r\n                },\r\n                multimedia : {\r\n                    open: function (data) {\r\n                        //открытие модального окна с аудио/видео; загрузка аудио/видео\r\n                        self.current.multimediaURL(self.helpers.getEncodedUrl(data));\r\n                        commonHelper.modal.open(self.modals.multimedia);\r\n                        $('#multimedia')[0].load();\r\n                    },\r\n                    loadeddata: function () {\r\n                        //проверка наличия якорей у аудио/видео при загрузке;\r\n                        //если есть, то перевести ползунок в начальное время\r\n                        if (self.current.media().start() == null && self.current.media().stop() == null) return;\r\n\r\n                        var multimedia = $('#multimedia')[0];\r\n                        multimedia.currentTime = self.helpers.toSeconds(self.current.media().start());\r\n                    },\r\n                    play: function () {\r\n                        //проверка выхода за границы якорей ползунка при проигрывании аудио/видео\r\n                        if (self.current.media().start() == null && self.current.media().stop() == null) return;\r\n\r\n                        var multimedia = $('#multimedia')[0];\r\n                        var stopTime = self.helpers.toSeconds(self.current.media().stop());\r\n                        var startTime = self.helpers.toSeconds(self.current.media().start());\r\n                        var currentTime = Math.floor(multimedia.currentTime);\r\n\r\n                        if (currentTime >= stopTime){\r\n                            multimedia.pause();\r\n                            multimedia.currentTime = stopTime;\r\n                        }\r\n                        else if (currentTime < startTime) {\r\n                            multimedia.pause();\r\n                            multimedia.currentTime = startTime;\r\n                        }\r\n                    }\r\n                },\r\n                test: {\r\n                    start: function(data){\r\n                        self.confirm.show({\r\n                            message: 'Вы уверены, что хотите пройти выбранный тест?',\r\n                            additionalHtml: '<p><span class=\"bold\">Предупреждение: </span>' +\r\n                            'Во время прохождения теста перезагрузка или переход на другую страницу приведёт к тому, ' +\r\n                            'что текущая попытка прохождения теста будет считаться израсходованной.</p>',\r\n                            approve: function(){\r\n                                commonHelper.cookies.create({\r\n                                    testId: data.test.id(),\r\n                                    testName: data.test.subject(),\r\n                                    disciplineName: data.test.disciplineName(),\r\n                                    testType: data.test.type()\r\n                                });\r\n                                window.location.href = '/test';\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            self.helpers = {\r\n                toHHMMSS : function (time) {\r\n                    var sec_num = parseInt(time, 10);\r\n                    var hours = Math.floor(sec_num / 3600);\r\n                    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n                    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n                    if (hours < 10) hours = \"0\" + hours;\r\n                    if (minutes < 10) minutes = \"0\" + minutes;\r\n                    if (seconds < 10) seconds = \"0\" + seconds;\r\n\r\n                    return hours + ':' + minutes + ':' + seconds;\r\n                },\r\n                getEncodedUrl : function (data) {\r\n                    var index = data.path().indexOf(data.name());\r\n                    var path = data.path().substring(0,index);\r\n                    return window.location.origin + '/' + encodeURI(path) + encodeURIComponent(data.name());\r\n                },\r\n                toSeconds : function (time) {\r\n                    if(+time == 0) return 0;\r\n                    var timeArray = time.split(':');\r\n                    return +timeArray[2] + +timeArray[1] * 60 + +timeArray[0] * 3600;\r\n                }\r\n            };\r\n            self.alter = {\r\n                discipline: {\r\n                    fill: function(data){\r\n                        self.current.discipline()\r\n                            .id(data.id())\r\n                            .name(data.name())\r\n                            .abbreviation(data.abbreviation())\r\n                            .description(data.description());\r\n                    },\r\n                    empty: function(){\r\n                        self.current.discipline()\r\n                            .id(0)\r\n                            .name('')\r\n                            .abbreviation('')\r\n                            .description('');\r\n                    }\r\n                },\r\n                media: {\r\n                    fill: function (data) {\r\n                        var start, stop;\r\n                        +data.start() ? start = self.toHHMMSS(+data.start()) : start = data.start();\r\n                        +data.stop() ? stop = self.toHHMMSS(+data.stop()) : stop = data.stop();\r\n\r\n                        self.current.media()\r\n                            .id(data.id())\r\n                            .type(data.type())\r\n                            .content(data.content())\r\n                            .path(data.path())\r\n                            .name(data.name())\r\n                            .hash(data.hash())\r\n                            .stop(stop)\r\n                            .start(start);\r\n                    },\r\n                    empty: function () {\r\n                        self.current.media()\r\n                            .id(0)\r\n                            .type('')\r\n                            .content('')\r\n                            .path('')\r\n                            .name('')\r\n                            .hash('')\r\n                            .stop(null)\r\n                            .start(null);\r\n                    }\r\n                }\r\n\r\n            };\r\n\r\n            self.get = {\r\n                disciplines: function(profileId){\r\n                    var filter = self.filter;\r\n                    var profile = '';\r\n                    var name = 'name=' + filter.discipline();\r\n                    var page = 'page=' + self.pagination.currentPage();\r\n                    var pageSize = 'pageSize=' + self.pagination.pageSize();\r\n                    var url = '/api/disciplines/show?' + page + '&' + pageSize + '&' + name + '&' + profile;\r\n\r\n                    $ajaxget({\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.disciplines(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                        }\r\n                    });\r\n\r\n                },\r\n                disciplineProfiles: function(){\r\n                    var id = self.current.discipline().id();\r\n                    if (!id) return;\r\n                    self.multiselect.tags([]);\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/' + id + '/profiles',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            $.each(self.multiselect.data(), function(i, profile){\r\n                                $.each(data(), function(i, elem){\r\n                                    if (elem.profile_id() == profile.id())\r\n                                        self.multiselect.tags.push(profile);\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                profiles: function(){\r\n                    $ajaxget({\r\n                        url: '/api/profiles',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.multiselect.data(data());\r\n                        }\r\n                    });\r\n                },\r\n                themes: function(){\r\n                    var url = '/api/disciplines/' + self.current.discipline().id() +'/themes';\r\n                    $.get(url, function(response){\r\n                        var result = ko.mapping.fromJSON(response);\r\n                        if (result.Success()){\r\n                            self.current.themes(result.Data());\r\n                            return;\r\n                        }\r\n                        self.errors.show(result.Message());\r\n                    });\r\n                },\r\n                disciplineMedias: function (disciplineId) {\r\n                    $ajaxget({\r\n                        url: '/api/mediable/discipline/' + disciplineId,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.get.medias(data);\r\n                        }\r\n                    });\r\n                },\r\n                themeMedias: function (themeId) {\r\n                    $ajaxget({\r\n                        url: '/api/mediable/theme/' + themeId,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.get.medias(data);\r\n                        }\r\n                    });\r\n                },\r\n                currentMedias: function () {\r\n                    if(self.current.theme().id() == 0)\r\n                        self.get.disciplineMedias(self.current.discipline().id());\r\n                    else self.get.themeMedias(self.current.theme().id());\r\n                },\r\n                medias: function (data) {\r\n                    self.current.medias.removeAll();\r\n                    self.current.multimedias.removeAll();\r\n                    self.current.others.removeAll();\r\n                    ko.utils.arrayForEach(data(), function (mediable) {\r\n                        +mediable.start() ?\r\n                            mediable.media.start = ko.observable(self.helpers.toHHMMSS(+mediable.start()))\r\n                            : mediable.media.start = ko.observable(mediable.start());\r\n                        +mediable.stop() ?\r\n                            mediable.media.stop = ko.observable(self.helpers.toHHMMSS(+mediable.stop()))\r\n                            : mediable.media.stop = ko.observable(mediable.stop());\r\n                        mediable.media.pureName = ko.observable(mediable.media.name().substring(0, mediable.media.name().lastIndexOf('.')));\r\n                        if (mediable.media.type() == 'audio' || mediable.media.type() == 'video' || mediable.media.type() == 'image')\r\n                            self.current.multimedias.push(mediable.media);\r\n                        else if (mediable.media.type() == 'text') self.current.medias.push(mediable.media);\r\n                        else self.current.others.push(mediable.media);\r\n                    });\r\n                },\r\n                tests: function(){\r\n                    $ajaxget({\r\n                        url: '/api/tests/showForStudent?discipline=' + self.current.discipline().id(),\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.tests(data());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get.disciplines();\r\n            self.get.profiles();\r\n\r\n            self.events.theme = function(data, e){\r\n                if (e.which === 13)\r\n                    self.actions.theme.end.add();\r\n            };\r\n\r\n            // SUBSCRIPTIONS\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.get.disciplines();\r\n            });\r\n\r\n            self.filter.discipline.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.disciplines();\r\n            });\r\n            self.filter.profile.subscribe(function(){\r\n                self.mode(state.none);\r\n                self.pagination.currentPage(1);\r\n                self.get.disciplines();\r\n            });\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(materialsViewModel());\r\n});"]}