{"version":3,"sources":["materials.js"],"names":[],"mappingsfile":"student-materials.js","sourcesContent":["$(document).ready(function(){\n    var materialsViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.student.materials,\n                mode: true,\n                pagination: 5,\n                multiselect: true\n            });\n\n            self.modals = {\n                multimedia: '#multimedia-modal'\n            };\n\n            self.current = {\n                disciplines: ko.observableArray([]),\n                discipline: ko.validatedObservable({\n                    id: ko.observable(0),\n                    name: ko.observable('').extend({\n                        required: true,\n                        maxLength: 200\n                    }),\n                    abbreviation: ko.observable('').extend({\n                        required: true,\n                        maxLength: 50\n                    }),\n                    description: ko.observable('')\n                }),\n                themes: ko.observableArray([]),\n                theme: ko.observable({\n                    id: ko.observable(0),\n                    name: ko.observable(''),\n                    mode: ko.observable(state.none)\n                }),\n                medias: ko.observableArray([]),\n                multimedias: ko.observableArray([]),\n                others: ko.observableArray([]),\n                media: ko.observable({\n                    id: ko.observable(0),\n                    type: ko.observable(''),\n                    content: ko.observable(''),\n                    path: ko.observable(''),\n                    name: ko.observable(''),\n                    hash: ko.observable(''),\n                    start: ko.observable(null),\n                    stop: ko.observable(null)\n                }),\n                multimediaURL: ko.observable('')\n            };\n\n            self.filter = {\n                discipline: ko.observable(''),\n                profile : ko.observable(),\n                clear: function(){\n                    self.filter.discipline('').profile(null);\n                }\n            };\n\n            self.actions = {\n                discipline: {\n                    show: function(data){\n                        if (self.mode() === state.none ||\n                            self.current.discipline().id() !== data.id()){\n                            self.mode(state.overall);\n                            self.alter.discipline.fill(data);\n                            self.get.disciplineProfiles();\n                            self.get.disciplineMedias(data.id());\n                            return;\n                        }\n                        self.actions.discipline.cancel();\n                    },\n                    cancel: function(){\n                        self.mode(state.none);\n                        self.alter.discipline.empty();\n                    },\n                    // вывод всех файлов дисциплины\n                    overall: function (data) {\n                        if (self.mode() != state.overall){\n                            self.mode(state.overall);\n                            self.current.theme().id(0);\n                            self.get.disciplineMedias(data.id());\n                        }\n                    },\n                    // вывод всех тем дисциплины\n                    themes: function () {\n                        if (self.mode() != state.themes){\n                            self.mode(state.themes);\n                            self.get.themes();\n                        }\n                    }\n                },\n                theme: {\n                    cancel: function(){\n                        self.current.theme()\n                            .id(0);\n                        self.multiselect.tags([]);\n                    },\n                    // вывод файлов темы\n                    materials: function (data) {\n                        if (self.current.theme().id() !== data.id()){\n                            self.mode(state.materials);\n                            self.current.theme().id(data.id());\n                            self.get.themeMedias(data.id());\n                            return;\n                        }\n                        self.actions.theme.cancel();\n                    }\n                },\n                media: {\n                    move: function (data) {\n                        self.alter.media.fill(data);\n                        if (data.type() == 'text') {\n                            if (data.start() != null) window.open('/media/' + data.id() + '#' + data.start());\n                            else window.open('/media/' + data.id());\n                        }\n                        else  if (data.type() == 'audio' || data.type() == 'video') {\n                            self.actions.multimedia.open(data);\n                        }\n                        else window.open(self.helpers.getEncodedUrl(data));\n                    }\n                },\n                multimedia : {\n                    open: function (data) {\n                        //открытие модального окна с аудио/видео; загрузка аудио/видео\n                        self.current.multimediaURL(self.helpers.getEncodedUrl(data));\n                        commonHelper.modal.open(self.modals.multimedia);\n                        $('#multimedia')[0].load();\n                    },\n                    loadeddata: function () {\n                        //проверка наличия якорей у аудио/видео при загрузке;\n                        //если есть, то перевести ползунок в начальное время\n                        if (self.current.media().start() == null && self.current.media().stop() == null) return;\n\n                        var multimedia = $('#multimedia')[0];\n                        multimedia.currentTime = self.helpers.toSeconds(self.current.media().start());\n                    },\n                    play: function () {\n                        //проверка выхода за границы якорей ползунка при проигрывании аудио/видео\n                        if (self.current.media().start() == null && self.current.media().stop() == null) return;\n\n                        var multimedia = $('#multimedia')[0];\n                        var stopTime = self.helpers.toSeconds(self.current.media().stop());\n                        var startTime = self.helpers.toSeconds(self.current.media().start());\n                        var currentTime = Math.floor(multimedia.currentTime);\n\n                        if (currentTime >= stopTime){\n                            multimedia.pause();\n                            multimedia.currentTime = stopTime;\n                        }\n                        else if (currentTime < startTime) {\n                            multimedia.pause();\n                            multimedia.currentTime = startTime;\n                        }\n                    }\n                }\n            };\n            self.helpers = {\n                toHHMMSS : function (time) {\n                    var sec_num = parseInt(time, 10);\n                    var hours = Math.floor(sec_num / 3600);\n                    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n                    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n                    if (hours < 10) hours = \"0\" + hours;\n                    if (minutes < 10) minutes = \"0\" + minutes;\n                    if (seconds < 10) seconds = \"0\" + seconds;\n\n                    return hours + ':' + minutes + ':' + seconds;\n                },\n                getEncodedUrl : function (data) {\n                    var index = data.path().indexOf(data.name());\n                    var path = data.path().substring(0,index);\n                    return window.location.origin + '/' + encodeURI(path) + encodeURIComponent(data.name());\n                },\n                toSeconds : function (time) {\n                    if(+time == 0) return 0;\n                    var timeArray = time.split(':');\n                    return +timeArray[2] + +timeArray[1] * 60 + +timeArray[0] * 3600;\n                }\n            };\n            self.alter = {\n                discipline: {\n                    fill: function(data){\n                        self.current.discipline()\n                            .id(data.id())\n                            .name(data.name())\n                            .abbreviation(data.abbreviation())\n                            .description(data.description());\n                    },\n                    empty: function(){\n                        self.current.discipline()\n                            .id(0)\n                            .name('')\n                            .abbreviation('')\n                            .description('');\n                    }\n                },\n                media: {\n                    fill: function (data) {\n                        var start, stop;\n                        +data.start() ? start = self.toHHMMSS(+data.start()) : start = data.start();\n                        +data.stop() ? stop = self.toHHMMSS(+data.stop()) : stop = data.stop();\n\n                        self.current.media()\n                            .id(data.id())\n                            .type(data.type())\n                            .content(data.content())\n                            .path(data.path())\n                            .name(data.name())\n                            .hash(data.hash())\n                            .stop(stop)\n                            .start(start);\n                    },\n                    empty: function () {\n                        self.current.media()\n                            .id(0)\n                            .type('')\n                            .content('')\n                            .path('')\n                            .name('')\n                            .hash('')\n                            .stop(null)\n                            .start(null);\n                    }\n                }\n\n            };\n\n            self.get = {\n                disciplines: function(profileId){\n                    var filter = self.filter;\n                    var profile = '';\n                    var name = 'name=' + filter.discipline();\n                    var page = 'page=' + self.pagination.currentPage();\n                    var pageSize = 'pageSize=' + self.pagination.pageSize();\n                    var url = '/api/disciplines/show?' + page + '&' + pageSize + '&' + name + '&' + profile;\n\n                    $ajaxget({\n                        url: url,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.disciplines(data.data());\n                            self.pagination.itemsCount(data.count());\n                        }\n                    });\n\n                },\n                disciplineProfiles: function(){\n                    var id = self.current.discipline().id();\n                    if (!id) return;\n                    self.multiselect.tags([]);\n                    $ajaxget({\n                        url: '/api/disciplines/' + id + '/profiles',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            $.each(self.multiselect.data(), function(i, profile){\n                                $.each(data(), function(i, elem){\n                                    if (elem.profile_id() == profile.id())\n                                        self.multiselect.tags.push(profile);\n                                });\n                            });\n                        }\n                    });\n                },\n                profiles: function(){\n                    $ajaxget({\n                        url: '/api/profiles',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.multiselect.data(data());\n                        }\n                    });\n                },\n                themes: function(){\n                    var url = '/api/disciplines/' + self.current.discipline().id() +'/themes';\n                    $.get(url, function(response){\n                        var result = ko.mapping.fromJSON(response);\n                        if (result.Success()){\n                            self.current.themes(result.Data());\n                            return;\n                        }\n                        self.errors.show(result.Message());\n                    });\n                },\n                disciplineMedias: function (disciplineId) {\n                    $ajaxget({\n                        url: '/api/mediable/discipline/' + disciplineId,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.get.medias(data);\n                        }\n                    });\n                },\n                themeMedias: function (themeId) {\n                    $ajaxget({\n                        url: '/api/mediable/theme/' + themeId,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.get.medias(data);\n                        }\n                    });\n                },\n                currentMedias: function () {\n                    if(self.current.theme().id() == 0)\n                        self.get.disciplineMedias(self.current.discipline().id());\n                    else self.get.themeMedias(self.current.theme().id());\n                },\n                medias: function (data) {\n                    self.current.medias.removeAll();\n                    self.current.multimedias.removeAll();\n                    self.current.others.removeAll();\n                    ko.utils.arrayForEach(data(), function (mediable) {\n                        +mediable.start() ?\n                            mediable.media.start = ko.observable(self.helpers.toHHMMSS(+mediable.start()))\n                            : mediable.media.start = ko.observable(mediable.start());\n                        +mediable.stop() ?\n                            mediable.media.stop = ko.observable(self.helpers.toHHMMSS(+mediable.stop()))\n                            : mediable.media.stop = ko.observable(mediable.stop());\n                        mediable.media.pureName = ko.observable(mediable.media.name().substring(0, mediable.media.name().lastIndexOf('.')));\n                        if (mediable.media.type() == 'audio' || mediable.media.type() == 'video' || mediable.media.type() == 'image')\n                            self.current.multimedias.push(mediable.media);\n                        else if (mediable.media.type() == 'text') self.current.medias.push(mediable.media);\n                        else self.current.others.push(mediable.media);\n                    });\n                }\n            };\n\n            self.get.disciplines();\n            self.get.profiles();\n\n            self.events.theme = function(data, e){\n                if (e.which === 13)\n                    self.actions.theme.end.add();\n            };\n\n            // SUBSCRIPTIONS\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.mode(state.none);\n                self.get.disciplines();\n            });\n\n            self.filter.discipline.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.disciplines();\n            });\n            self.filter.profile.subscribe(function(){\n                self.mode(state.none);\n                self.pagination.currentPage(1);\n                self.get.disciplines();\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(materialsViewModel());\n});"]}