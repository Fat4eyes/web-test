{"version":3,"sources":["studyplan.js"],"names":[],"mappingsfile":"manager-studyplan.js","sourcesContent":["$(document).ready(function () {\n    var studyplanViewModel = function () {\n        return new function () {\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.main,\n                mode: true\n            });\n\n\n            self.initial = {\n                unUrlPlanId: function(){\n                    var url = window.location.href;\n                    var id = +url.substr(url.lastIndexOf('/')+1);\n                    if ($.isNumeric(id)){\n                        self.current.planId(id);\n                        self.get.disciplines();\n                        return;\n                    }\n                    self.errors.show('Учебный план не определен');\n                    setTimeout(function(){\n                        window.location.href = '/admin/main';\n                    }, 5000);\n                },\n                disciplines: ko.observableArray([]),\n                selection: ko.observable(null).extend({\n                    required: true\n                })\n            };\n            self.filter = {\n                discipline: ko.observable(''),\n                clear: function(){\n                    self.filter.discipline('');\n                }\n            };\n            self.current = {\n                disciplines: ko.observableArray([]),\n                discipline: ko.validatedObservable({\n                    id: ko.observable(0),\n                    startSemester: ko.observable(0).extend({\n                        required: true,\n                        min: 1,\n                        max: 10,\n                        number: true\n                    }),\n                    semestersCount: ko.observable(0).extend({\n                        required: true,\n                        min: 1,\n                        max: 10,\n                        number: true\n                    }),\n                    hours: ko.observable(0).extend({\n                        required: true,\n                        min: 1,\n                        max: 10000,\n                        number: true\n                    }),\n                    hasProject: ko.observable(true),\n                    hasExam: ko.observable(true),\n                    discipline: ko.observable(''),\n                    disciplineId: ko.observable(0)\n                }),\n                planId: ko.observable()\n            };\n            self.alter = {\n                stringify: function(){\n                  var discipline = ko.mapping.toJS(self.current.discipline);\n                  if (self.mode() === state.create) delete discipline.id;\n                  return JSON.stringify({\n                      disciplinePlan: discipline,\n                      studyPlanId: self.current.planId(),\n                      disciplineId: self.current.discipline().disciplineId()\n                  })\n              },\n                fill: function(d){\n                  self.current.discipline().id(d.id()).hours(d.hours())\n                      .startSemester(d.startSemester()).semestersCount(d.semestersCount())\n                      .hasProject(d.hasProject()).hasExam(d.hasExam())\n                      .discipline(d.discipline()).disciplineId(d.disciplineId());\n                },\n                empty: function(){\n                    self.current.discipline().id(0).hours('')\n                        .startSemester('').semestersCount('')\n                        .hasProject(true).hasExam(true)\n                        .discipline('').disciplineId(0);\n                }\n            };\n            self.actions = {\n                show: function(data){\n                    var isCurrent = self.current.discipline().id() === data.id();\n                    if (isCurrent){\n                        self.alter.empty();\n                        self.mode(state.none);\n                        return;\n                    }\n                    self.alter.fill(data);\n                    self.mode(state.info);\n                },\n                start: {\n                    create: function(){\n                        self.mode() === state.create\n                            ? self.mode(state.none)\n                            : self.mode(state.create);\n                        self.alter.empty();\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    update: function(){\n                        self.mode(state.update);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    remove: function(){\n                        self.mode(state.remove);\n                        commonHelper.modal.open('#remove-discipline-plan-modal');\n                    }\n                },\n                end: {\n                    update: function(){\n                        self.current.discipline.isValid()\n                            ? self.post.discipline()\n                            : self.validation[$('[accept-validation]').attr('id')].open();\n                    },\n                    remove: function(){\n                        self.post.removal();\n                    }\n                },\n                cancel: function(){\n                    if (self.mode() === state.create){\n                        self.alter.empty();\n                        self.mode(state.none);\n                    }\n                    self.mode(state.info);\n                },\n                switchExam: {\n                    on: function(data){\n                        data.hasExam(true);\n                    },\n                    off: function(data){\n                        data.hasExam(false);\n                    }\n                },\n                switchProject: {\n                    on: function(data){\n                        data.hasProject(true);\n                    },\n                    off: function(data){\n                        data.hasProject(false);\n                    }\n                },\n            };\n            self.get = {\n                fullList: function(){\n                    var requestOptions = {\n                        url: '/api/disciplines/',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.initial.disciplines(data());\n                        }\n                    };\n                    $ajaxget(requestOptions);\n                },\n                disciplines: function(){\n                    var name = self.filter.discipline() ? '&name=' + self.filter.discipline() : '';\n                    var url = '/api/plan/discipline/show' +\n                        '?studyplan=' + self.current.planId() + name;\n\n                    var requestOptions = {\n                        url: url,\n                        errors: self.errors,\n                        data: null,\n                        successCallback: function(data){\n                            self.current.disciplines(data.data());\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                }\n            };\n            self.post = {\n                discipline: function(){\n                    var requestOptions = {\n                        url: self.mode() === state.create ? '/api/plan/discipline/create' : '/api/plan/discipline/update',\n                        data: self.alter.stringify(),\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.mode(state.none);\n                            self.alter.empty();\n                            self.initial.selection(null);\n                            self.get.disciplines();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                },\n                removal: function(){\n                    var url = '/api/plan/discipline/delete/' + self.current.discipline().id();\n                    var requestOptions = {\n                        url: url,\n                        data: null,\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.alter.empty();\n                            self.mode(state.none);\n                            self.get.disciplines();\n                        }\n                    };\n                    $ajaxpost(requestOptions);\n                }\n            };\n\n\n            self.initial.unUrlPlanId();\n            self.get.fullList();\n\n\n\n            self.initial.selection.subscribe(function(value){\n                if (value){\n                    self.current.discipline().disciplineId(value.id());\n                    self.current.discipline().discipline(value.name());\n                    return;\n                }\n                self.current.discipline().disciplineId(0);\n                self.current.discipline().discipline('');\n            });\n            self.filter.discipline.subscribe(function(){\n                self.mode(state.none);\n                self.get.disciplines();\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(studyplanViewModel());\n});\n"],"sourceRoot":"/source/"}