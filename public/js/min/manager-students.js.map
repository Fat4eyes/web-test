{"version":3,"sources":["students.js"],"names":[],"mappingsfile":"manager-students.js","sourcesContent":["$(document).ready(function(){\n    var studentsViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.students,\n                pagination: 20,\n                mode: true\n            });\n\n            self.initial = {\n                groups: ko.observableArray([])\n            };\n            self.current = {\n                students: ko.observableArray([]),\n                student: ko.validatedObservable({\n                    id: ko.observable(''),\n                    firstname: ko.observable('').extend({\n                        required: true,\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    lastname: ko.observable('').extend({\n                        required: true,\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    patronymic: ko.observable('').extend({\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\n                        maxLength: 80\n                    }),\n                    group: ko.observable(null).extend({required: true}),\n                    email: ko.observable('').extend({required: true, email: true}),\n                    password: ko.observable('').extend({\n                        required: true,\n                        minLength: 6,\n                        maxLength: 16\n                    }),\n                    active: ko.observable(true)\n                }),\n                password: ko.observable(null).extend({\n                    required: true,\n                    minLength: 6,\n                    maxLength: 16\n                })\n            };\n\n            self.filter = {\n                name: ko.observable(''),\n                group: ko.observable(),\n                request: ko.observable(filters.active.all),\n                clear: function(){\n                    self.filter\n                        .name('')\n                        .group(null)\n                        .request(filters.active.all);\n                },\n                set: {\n                    group: function(id){\n                        $.each(self.initial.groups(), function(i, item){\n                            if (item.id() == id) self.filter.group(item);\n                        });\n                    }\n                }\n            };\n            self.actions = {\n                show: function(data){\n                    if (self.mode() === state.none || self.current.student().id() !== data.id()){\n                        self.get.student(data.id());\n                        return;\n                    }\n                    self.mode(state.none);\n                    self.alter.empty();\n                },\n                start: {\n                    create: function(){\n                        self.alter.empty();\n                        self.mode() === state.create\n                            ? self.mode(state.none)\n                            : self.mode(state.create);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    update: function(data){\n                        self.mode(state.update);\n                        self.alter.fill(data);\n                        commonHelper.buildValidationList(self.validation);\n                    },\n                    remove: function(){\n                        commonHelper.modal.open('#remove-request-modal');\n                    }\n                },\n                end: {\n                    update: function(){\n                        self.current.student.isValid()\n                            ? self.post.student()\n                            : self.validation[$('[accept-validation]').attr('id')].open();\n                    },\n                    remove: function(){\n                        self.post.request();\n                    }\n                },\n                cancel: function(){\n                    self.mode(state.none);\n                    self.alter.empty();\n                    self.current.password(null);\n                },\n\n                password: {\n                    change: function(){\n                        commonHelper.modal.open('#change-password-modal');\n                    },\n                    cancel: function(){\n                        self.current.password(null);\n                        self.validation[$('.box-modal [validate]').attr('id')].close();\n                        commonHelper.modal.close('#change-password-modal');\n                    },\n                    approve: function(){\n                        self.current.password.isValid()\n                            ? self.post.password()\n                            : self.validation[$('.box-modal [validate]').attr('id')].open();\n                    }\n                },\n                switch: {\n                    on: function(data, e){\n                        self.confirm.show({\n                            message: 'Вы действительно хотите подтвердить заявку?',\n                            approve: function(){\n                                self.post.approval(data.id());\n                            }\n                        });\n                        e.stopPropagation();\n                    },\n                    off: function(data, e){\n                        self.confirm.show({\n                            message: 'Заявка будет удалена. Вы действительно хотите отклонить выбранную заявку?',\n                            approve: function(){\n                                self.post.request(data.id());\n                            }\n                        });\n                        e.stopPropagation();\n                    }\n                }\n            };\n\n            self.alter = {\n                set: {\n                    group: function(id){\n                        $.each(self.initial.groups(), function(i, item){\n                            if (item.id() === id)\n                                self.current.student().group(item);\n                        });\n                    }\n                },\n                stringify: {\n                    student: function(){\n                        var student = ko.mapping.toJS(self.current.student);\n                        delete student.group;\n\n                        self.mode() === state.create\n                            ? delete student.id\n                            : delete student.password;\n\n                        return JSON.stringify({\n                            student: student,\n                            groupId: self.current.student().group().id()\n                        });\n                    },\n                    password: function(){\n                        return JSON.stringify({\n                            userId: self.current.student().id(),\n                            password: self.current.password()\n                        });\n                    }\n                },\n                fill: function(data){\n                    self.current.student().id(data.id())\n                        .firstname(data.firstname()).lastname(data.lastname())\n                        .patronymic(data.patronymic())\n                        .email(data.email()).active(data.active())\n                        .password('password');\n                },\n                empty: function(){\n                    self.current.student().id('').group(null)\n                        .firstname('').lastname('').patronymic('')\n                        .email('').active(true).password('');\n                }\n            };\n            self.get = {\n                students: function(){\n                    var name = self.filter.name() ? '&name=' + self.filter.name() : '';\n                    var group = self.filter.group() ? '&groupId=' + self.filter.group().id() : '';\n\n                    var active = self.filter.request() === filters.active.all ? '' : '';\n                    active = self.filter.request() === filters.active.inactive ? '&isActive=false' : active;\n                    active = self.filter.request() === filters.active.active ? '&isActive=true' : active;\n\n                    var url = '/api/user/show' +\n                        '?page=' + self.pagination.currentPage() +\n                        '&pageSize=' + self.pagination.pageSize()\n                        + name + group + active;\n                    $ajaxget({\n                        url: url,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.students(data.data());\n                            self.pagination.itemsCount(data.count());\n                            commonHelper.tooltip({selector: '.item > .fa', side: 'top'});\n                        }\n                    });\n                },\n                student: function(id){\n                    $ajaxget({\n                        url: '/api/user/getStudent/' + id,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.alter.fill(data);\n                            self.alter.set.group(data.group.id());\n                            self.mode(state.info);\n                        }\n                    });\n                },\n                groups: function(){\n                    $ajaxget({\n                        url: '/api/groups',\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.initial.groups(data());\n                            var cookie = $.cookie();\n                            if (!$.isEmptyObject(cookie)){\n                                self.filter.set.group(cookie.groupId);\n                                commonHelper.cookies.remove(cookie);\n                                return;\n                            }\n                            self.get.students();\n                        }\n                    });\n                }\n            };\n            self.get.groups();\n\n            self.post = {\n                request: function(studentId){\n                    var id = studentId ? studentId : self.current.student().id();\n                    $ajaxpost({\n                        url: '/api/user/delete/' + id,\n                        data: null,\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.students();\n                        }\n                    });\n                },\n                approval: function(id){\n                    $ajaxpost({\n                        url: '/api/user/activate/' + id,\n                        errors: self.errors,\n                        successCallback: function(){\n                            self.get.students();\n                        }\n                    })\n                },\n                student: function(){\n                    $ajaxpost({\n                        url: '/api/groups/student/' + self.mode(),\n                        errors: self.errors,\n                        data: self.alter.stringify.student(),\n                        successCallback: function(){\n                            self.actions.cancel();\n                            self.get.students();\n                        }\n                    });\n                },\n                password: function(){\n                    $ajaxpost({\n                        url: '/api/user/setPassword',\n                        errors: self.errors,\n                        data: self.alter.stringify.password(),\n                        successCallback: function(){\n                            self.actions.password.cancel();\n                            self.inform.show({\n                                message: 'Пароль успешно изменен'\n                            });\n                        }\n                    });\n                }\n            };\n\n            self.filter.group.subscribe(function(){\n                self.actions.cancel();\n                self.pagination.currentPage(1);\n                self.get.students();\n            });\n            self.filter.name.subscribe(function(){\n                self.actions.cancel();\n                self.pagination.currentPage(1);\n                self.get.students();\n            });\n            self.filter.request.subscribe(function(){\n                self.actions.cancel();\n                self.pagination.currentPage(1);\n                self.get.students();\n            });\n            self.pagination.itemsCount.subscribe(function(value){\n                if (value){\n                    self.pagination.totalPages(Math.ceil(\n                        value/self.pagination.pageSize()\n                    ));\n                }\n            });\n            self.pagination.currentPage.subscribe(function(){\n                self.get.students();\n            });\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(studentsViewModel());\n});"],"sourceRoot":"/source/"}