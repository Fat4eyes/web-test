{"version":3,"sources":["students.js"],"names":[],"mappingsfile":"manager-students.js","sourcesContent":["$(document).ready(function(){\r\n    var studentsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.students,\r\n                pagination: 20,\r\n                mode: true\r\n            });\r\n\r\n            self.initial = {\r\n                groups: ko.observableArray([])\r\n            };\r\n            self.current = {\r\n                students: ko.observableArray([]),\r\n                student: ko.validatedObservable({\r\n                    id: ko.observable(''),\r\n                    firstname: ko.observable('').extend({\r\n                        required: true,\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    lastname: ko.observable('').extend({\r\n                        required: true,\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    patronymic: ko.observable('').extend({\r\n                        pattern: '^[А-ЯЁ][а-яё]+(\\-{1}(?:[А-ЯЁ]{1}(?:[а-яё]+)))?$',\r\n                        maxLength: 80\r\n                    }),\r\n                    group: ko.observable(null).extend({required: true}),\r\n                    email: ko.observable('').extend({required: true, email: true}),\r\n                    password: ko.observable('').extend({\r\n                        required: true,\r\n                        minLength: 6,\r\n                        maxLength: 16\r\n                    }),\r\n                    active: ko.observable(true)\r\n                }),\r\n                password: ko.observable(null).extend({\r\n                    required: true,\r\n                    minLength: 6,\r\n                    maxLength: 16\r\n                })\r\n            };\r\n\r\n            self.filter = {\r\n                name: ko.observable(''),\r\n                group: ko.observable(),\r\n                request: ko.observable(filters.active.all),\r\n                clear: function(){\r\n                    self.filter\r\n                        .name('')\r\n                        .group(null)\r\n                        .request(filters.active.all);\r\n                },\r\n                set: {\r\n                    group: function(id){\r\n                        $.each(self.initial.groups(), function(i, item){\r\n                            if (item.id() == id) self.filter.group(item);\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            self.actions = {\r\n                show: function(data){\r\n                    if (self.mode() === state.none || self.current.student().id() !== data.id()){\r\n                        self.get.student(data.id());\r\n                        return;\r\n                    }\r\n                    self.mode(state.none);\r\n                    self.alter.empty();\r\n                },\r\n                start: {\r\n                    create: function(){\r\n                        self.alter.empty();\r\n                        self.mode() === state.create\r\n                            ? self.mode(state.none)\r\n                            : self.mode(state.create);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    update: function(data){\r\n                        self.mode(state.update);\r\n                        self.alter.fill(data);\r\n                        commonHelper.buildValidationList(self.validation);\r\n                    },\r\n                    remove: function(){\r\n                        commonHelper.modal.open('#remove-request-modal');\r\n                    }\r\n                },\r\n                end: {\r\n                    update: function(){\r\n                        self.current.student.isValid()\r\n                            ? self.post.student()\r\n                            : self.validation[$('[accept-validation]').attr('id')].open();\r\n                    },\r\n                    remove: function(){\r\n                        self.post.request();\r\n                    }\r\n                },\r\n                cancel: function(){\r\n                    self.mode(state.none);\r\n                    self.alter.empty();\r\n                    self.current.password(null);\r\n                },\r\n\r\n                password: {\r\n                    change: function(){\r\n                        commonHelper.modal.open('#change-password-modal');\r\n                    },\r\n                    cancel: function(){\r\n                        self.current.password(null);\r\n                        self.validation[$('.box-modal [validate]').attr('id')].close();\r\n                        commonHelper.modal.close('#change-password-modal');\r\n                    },\r\n                    approve: function(){\r\n                        self.current.password.isValid()\r\n                            ? self.post.password()\r\n                            : self.validation[$('.box-modal [validate]').attr('id')].open();\r\n                    }\r\n                },\r\n                switch: {\r\n                    on: function(data, e){\r\n                        self.confirm.show({\r\n                            message: 'Вы действительно хотите подтвердить заявку?',\r\n                            approve: function(){\r\n                                self.post.approval(data.id());\r\n                            }\r\n                        });\r\n                        e.stopPropagation();\r\n                    },\r\n                    off: function(data, e){\r\n                        self.confirm.show({\r\n                            message: 'Заявка будет удалена. Вы действительно хотите отклонить выбранную заявку?',\r\n                            approve: function(){\r\n                                self.post.request(data.id());\r\n                            }\r\n                        });\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.alter = {\r\n                set: {\r\n                    group: function(id){\r\n                        $.each(self.initial.groups(), function(i, item){\r\n                            if (item.id() === id)\r\n                                self.current.student().group(item);\r\n                        });\r\n                    }\r\n                },\r\n                stringify: {\r\n                    student: function(){\r\n                        var student = ko.mapping.toJS(self.current.student);\r\n                        delete student.group;\r\n\r\n                        self.mode() === state.create\r\n                            ? delete student.id\r\n                            : delete student.password;\r\n\r\n                        return JSON.stringify({\r\n                            student: student,\r\n                            groupId: self.current.student().group().id()\r\n                        });\r\n                    },\r\n                    password: function(){\r\n                        return JSON.stringify({\r\n                            userId: self.current.student().id(),\r\n                            password: self.current.password()\r\n                        });\r\n                    }\r\n                },\r\n                fill: function(data){\r\n                    self.current.student().id(data.id())\r\n                        .firstname(data.firstname()).lastname(data.lastname())\r\n                        .patronymic(data.patronymic())\r\n                        .email(data.email()).active(data.active())\r\n                        .password('password');\r\n                },\r\n                empty: function(){\r\n                    self.current.student().id('').group(null)\r\n                        .firstname('').lastname('').patronymic('')\r\n                        .email('').active(true).password('');\r\n                }\r\n            };\r\n            self.get = {\r\n                students: function(){\r\n                    var name = self.filter.name() ? '&name=' + self.filter.name() : '';\r\n                    var group = self.filter.group() ? '&groupId=' + self.filter.group().id() : '';\r\n\r\n                    var active = self.filter.request() === filters.active.all ? '' : '';\r\n                    active = self.filter.request() === filters.active.inactive ? '&isActive=false' : active;\r\n                    active = self.filter.request() === filters.active.active ? '&isActive=true' : active;\r\n\r\n                    var url = '/api/user/show' +\r\n                        '?page=' + self.pagination.currentPage() +\r\n                        '&pageSize=' + self.pagination.pageSize()\r\n                        + name + group + active;\r\n                    $ajaxget({\r\n                        url: url,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.students(data.data());\r\n                            self.pagination.itemsCount(data.count());\r\n                            commonHelper.tooltip({selector: '.item > .fa', side: 'top'});\r\n                        }\r\n                    });\r\n                },\r\n                student: function(id){\r\n                    $ajaxget({\r\n                        url: '/api/user/getStudent/' + id,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.alter.fill(data);\r\n                            self.alter.set.group(data.group.id());\r\n                            self.mode(state.info);\r\n                        }\r\n                    });\r\n                },\r\n                groups: function(){\r\n                    $ajaxget({\r\n                        url: '/api/groups',\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.initial.groups(data());\r\n                            var cookie = $.cookie();\r\n                            if (!$.isEmptyObject(cookie)){\r\n                                self.filter.set.group(cookie.groupId);\r\n                                commonHelper.cookies.remove(cookie);\r\n                                return;\r\n                            }\r\n                            self.get.students();\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            self.get.groups();\r\n\r\n            self.post = {\r\n                request: function(studentId){\r\n                    var id = studentId ? studentId : self.current.student().id();\r\n                    $ajaxpost({\r\n                        url: '/api/user/delete/' + id,\r\n                        data: null,\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.students();\r\n                        }\r\n                    });\r\n                },\r\n                approval: function(id){\r\n                    $ajaxpost({\r\n                        url: '/api/user/activate/' + id,\r\n                        errors: self.errors,\r\n                        successCallback: function(){\r\n                            self.get.students();\r\n                        }\r\n                    })\r\n                },\r\n                student: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/groups/student/' + self.mode(),\r\n                        errors: self.errors,\r\n                        data: self.alter.stringify.student(),\r\n                        successCallback: function(){\r\n                            self.actions.cancel();\r\n                            self.get.students();\r\n                        }\r\n                    });\r\n                },\r\n                password: function(){\r\n                    $ajaxpost({\r\n                        url: '/api/user/setPassword',\r\n                        errors: self.errors,\r\n                        data: self.alter.stringify.password(),\r\n                        successCallback: function(){\r\n                            self.actions.password.cancel();\r\n                            self.inform.show({\r\n                                message: 'Пароль успешно изменен'\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.filter.group.subscribe(function(){\r\n                self.actions.cancel();\r\n                self.pagination.currentPage(1);\r\n                self.get.students();\r\n            });\r\n            self.filter.name.subscribe(function(){\r\n                self.actions.cancel();\r\n                self.pagination.currentPage(1);\r\n                self.get.students();\r\n            });\r\n            self.filter.request.subscribe(function(){\r\n                self.actions.cancel();\r\n                self.pagination.currentPage(1);\r\n                self.get.students();\r\n            });\r\n            self.pagination.itemsCount.subscribe(function(value){\r\n                if (value){\r\n                    self.pagination.totalPages(Math.ceil(\r\n                        value/self.pagination.pageSize()\r\n                    ));\r\n                }\r\n            });\r\n            self.pagination.currentPage.subscribe(function(){\r\n                self.get.students();\r\n            });\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(studentsViewModel());\r\n});"]}