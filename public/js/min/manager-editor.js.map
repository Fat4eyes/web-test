{"version":3,"sources":["editor.js"],"names":[],"mappingsfile":"manager-editor.js","sourcesContent":["$(document).ready(function () {\r\n    var editorViewModel = function () {\r\n        return new function () {\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.admin.materials,\r\n                mode: true\r\n            });\r\n\r\n            self.modals = {\r\n                move: '#move-modal'\r\n            };\r\n\r\n            self.media = ko.observable({\r\n                id: ko.observable(0),\r\n                type: ko.observable(''),\r\n                content: ko.observable(''),\r\n                path: ko.observable(''),\r\n                name: ko.observable(''),\r\n                hash: ko.observable('')\r\n            });\r\n            self.name = ko.observable('');\r\n            self.anchorNames = ko.observableArray([]);\r\n            self.current = {\r\n                discipline: ko.observable(0),\r\n                theme: ko.observable(0)\r\n            };\r\n\r\n            self.get = {\r\n                media: function () {\r\n                    var currentUrl = window.location.href;\r\n                    var urlParts = currentUrl.split('/');\r\n                    var mediaId = +urlParts[urlParts.length-1];\r\n                    $ajaxget({\r\n                        url: '/api/media/' + mediaId,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.fill(data);\r\n                            self.name(data.name().substring(0, data.name().lastIndexOf('.')));\r\n                        }\r\n                    });\r\n                },\r\n                state: function () {\r\n                    var currentUrl = window.location.href;\r\n                    var urlParts = currentUrl.split('/');\r\n                    if (urlParts[urlParts.length-2] == 'anchor'){\r\n                        self.mode(state.anchor);\r\n                        $('#iName')[0].disabled = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            self.initEditor = function () {\r\n                if (self.mode() == state.anchor) self.initAnchor();\r\n                else self.initAllCommands();\r\n            };\r\n            self.initAnchor = function () {\r\n                tinymce.init({\r\n                    selector:'#editor',\r\n                    valid_children : '+body[style]',\r\n                    language: 'ru',\r\n                    height: 500,\r\n                    plugins: ['anchor'],\r\n                    toolbar1: 'anchor',\r\n                    menubar: false,\r\n                    init_instance_callback: function (editor) {\r\n                        editor.on('keypress', function (e) {\r\n                            e.preventDefault();\r\n                        });\r\n                        editor.on('keydown', function (e) {\r\n                            e.preventDefault();\r\n                        });\r\n                        editor.on('paste', function (e) {\r\n                            e.preventDefault();\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n            self.initAllCommands = function () {\r\n                tinymce.init({\r\n                    selector:'#editor',\r\n                    valid_children : '+body[style]',\r\n                    language: 'ru',\r\n                    height: 500,\r\n                    plugins: [\r\n                        'advlist autolink lists link image charmap print preview hr anchor pagebreak',\r\n                        'searchreplace wordcount visualblocks visualchars code fullscreen',\r\n                        'insertdatetime nonbreaking save table contextmenu directionality',\r\n                        'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc help'\r\n                    ],\r\n                    toolbar1: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',\r\n                    toolbar2: 'print preview media | forecolor backcolor emoticons | codesample help'\r\n                });\r\n            };\r\n\r\n            self.move = function () {\r\n                window.location.href = '/admin/materials/';\r\n            };\r\n            self.update = function (media) {\r\n                $ajaxpost({\r\n                    url: '/api/media/update',\r\n                    error: self.errors,\r\n                    data: JSON.stringify({media: media}),\r\n                    successCallback: function(){\r\n                        commonHelper.modal.open(self.modals.move);\r\n                    }\r\n                });\r\n            };\r\n            self.approve = function () {\r\n                self.confirm.show({\r\n                    message: 'Вы уверены, что хотите сохранить изменения?',\r\n                    approve: function(){\r\n                        if (self.mode() == state.anchor) {\r\n                            self.createAnchors();\r\n                            return;\r\n                        }\r\n                        var volumeId = 'l1_';\r\n                        var oldPath = self.media().path();\r\n                        var extension = self.media().name().substring(self.media().name().lastIndexOf('.'), self.media().name().length);\r\n                        var pathToDirectory = oldPath.substring(oldPath.indexOf('/'), oldPath.lastIndexOf('/'));\r\n                        var newPath =  pathToDirectory.length > 0 ? pathToDirectory + \"/\" + self.name() + extension : self.name() + extension;\r\n                        var hash = volumeId + btoa(unescape(encodeURIComponent(newPath)))\r\n                                .replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '.')\r\n                                .replace(/\\.+$/, '');\r\n\r\n                        var media = {\r\n                            id: self.media().id(),\r\n                            type: self.media().type(),\r\n                            content: tinyMCE.activeEditor.getContent({format : 'raw'}),\r\n                            path: pathToDirectory.length > 0 ? \"upload\" + newPath : \"upload/\" + newPath,\r\n                            name: self.name() + extension,\r\n                            hash: hash\r\n                        };\r\n\r\n                        if (self.media().name().substring(0, self.media().name().lastIndexOf('.')) == self.name()) self.update(media);\r\n                        else self.checkName(hash, media);\r\n                    }\r\n                });\r\n\r\n            };\r\n            self.createAnchors = function () {\r\n                self.updateAnchors();\r\n\r\n                var media = {\r\n                    id: self.media().id(),\r\n                    type: self.media().type(),\r\n                    content: tinyMCE.activeEditor.getContent({format : 'raw'}),\r\n                    path: self.media().path(),\r\n                    name: self.media().name(),\r\n                    hash: self.media().hash()\r\n                };\r\n\r\n                $ajaxpost({\r\n                    url: '/api/media/update',\r\n                    error: self.errors,\r\n                    data: JSON.stringify({media: media}),\r\n                    successCallback: function(){\r\n                        ko.utils.arrayForEach(self.anchorNames(), function (anchor) {\r\n                            $ajaxpost({\r\n                                url: '/api/mediable/create',\r\n                                error: self.errors,\r\n                                data: JSON.stringify({\r\n                                    mediable: {start: anchor, stop: null},\r\n                                    discipline: null,\r\n                                    mediaId: self.media().id(),\r\n                                    themeId: null}),\r\n                                successCallback: function () {\r\n                                    commonHelper.modal.open(self.modals.move);\r\n                                }\r\n                            });\r\n                        })\r\n                    }\r\n                });\r\n\r\n\r\n            };\r\n\r\n            self.checkName = function (hash, media) {\r\n                $ajaxget({\r\n                    url: '/api/media/hash/' + hash, // есть ли файл с таким же названием\r\n                    errors: self.errors,\r\n                    successCallback: function(data){\r\n                        if (data().length == 0)\r\n                            self.update(media);\r\n                        else {\r\n                            self.errors.show('Файл с таким названием уже существует!');\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            self.updateAnchors = function () {\r\n                var content = tinyMCE.activeEditor.getContent({format : 'raw'});\r\n                var anchors = content.match(/<a\\sid=\\\"(.*?)\"\\scontenteditable=\\\"false\"\\sclass=\\\"mce-item-anchor\\\">/g);\r\n                ko.utils.arrayForEach(anchors, function (anchor) {\r\n                    var htmlAnchor = $.parseHTML(anchor)[0];\r\n                    self.anchorNames.push(htmlAnchor.id);\r\n                });\r\n            };\r\n\r\n            self.fill = function (data) {\r\n                self.media()\r\n                    .id(data.id())\r\n                    .type(data.type())\r\n                    .content(data.content())\r\n                    .path(data.path())\r\n                    .name(data.name())\r\n                    .hash(data.hash());\r\n            };\r\n\r\n            self.get.media();\r\n            self.get.state();\r\n            self.initEditor();\r\n\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(editorViewModel());\r\n});\r\n"]}