{"version":3,"sources":["editor.js"],"names":[],"mappingsfile":"manager-editor.js","sourcesContent":["$(document).ready(function () {\n    var editorViewModel = function () {\n        return new function () {\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.admin.materials,\n                mode: true\n            });\n\n            self.modals = {\n                move: '#move-modal'\n            };\n\n            self.media = ko.observable({\n                id: ko.observable(0),\n                type: ko.observable(''),\n                content: ko.observable(''),\n                path: ko.observable(''),\n                name: ko.observable(''),\n                hash: ko.observable('')\n            });\n            self.name = ko.observable('');\n            self.anchorNames = ko.observableArray([]);\n            self.current = {\n                discipline: ko.observable(0),\n                theme: ko.observable(0)\n            };\n\n            self.get = {\n                media: function () {\n                    var currentUrl = window.location.href;\n                    var urlParts = currentUrl.split('/');\n                    var mediaId = +urlParts[urlParts.length-1];\n                    $ajaxget({\n                        url: '/api/media/' + mediaId,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.fill(data);\n                            self.name(data.name().substring(0, data.name().lastIndexOf('.')));\n                        }\n                    });\n                },\n                state: function () {\n                    var currentUrl = window.location.href;\n                    var urlParts = currentUrl.split('/');\n                    if (urlParts[urlParts.length-2] == 'anchor'){\n                        self.mode(state.anchor);\n                        $('#iName')[0].disabled = true;\n                    }\n                }\n            };\n\n            self.initEditor = function () {\n                if (self.mode() == state.anchor) self.initAnchor();\n                else self.initAllCommands();\n            };\n            self.initAnchor = function () {\n                tinymce.init({\n                    selector:'#editor',\n                    valid_children : '+body[style]',\n                    language: 'ru',\n                    height: 500,\n                    plugins: ['anchor'],\n                    toolbar1: 'anchor',\n                    menubar: false,\n                    init_instance_callback: function (editor) {\n                        editor.on('keypress', function (e) {\n                            e.preventDefault();\n                        });\n                        editor.on('keydown', function (e) {\n                            e.preventDefault();\n                        });\n                        editor.on('paste', function (e) {\n                            e.preventDefault();\n                        });\n                    }\n                });\n            };\n            self.initAllCommands = function () {\n                tinymce.init({\n                    selector:'#editor',\n                    valid_children : '+body[style]',\n                    language: 'ru',\n                    height: 500,\n                    plugins: [\n                        'advlist autolink lists link image charmap print preview hr anchor pagebreak',\n                        'searchreplace wordcount visualblocks visualchars code fullscreen',\n                        'insertdatetime nonbreaking save table contextmenu directionality',\n                        'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc help'\n                    ],\n                    toolbar1: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',\n                    toolbar2: 'print preview media | forecolor backcolor emoticons | codesample help'\n                });\n            };\n\n            self.move = function () {\n                window.location.href = '/admin/materials/';\n            };\n            self.update = function (media) {\n                $ajaxpost({\n                    url: '/api/media/update',\n                    error: self.errors,\n                    data: JSON.stringify({media: media}),\n                    successCallback: function(){\n                        commonHelper.modal.open(self.modals.move);\n                    }\n                });\n            };\n            self.approve = function () {\n                self.confirm.show({\n                    message: 'Вы уверены, что хотите сохранить изменения?',\n                    approve: function(){\n                        if (self.mode() == state.anchor) {\n                            self.createAnchors();\n                            return;\n                        }\n                        var volumeId = 'l1_';\n                        var oldPath = self.media().path();\n                        var extension = self.media().name().substring(self.media().name().lastIndexOf('.'), self.media().name().length);\n                        var pathToDirectory = oldPath.substring(oldPath.indexOf('/'), oldPath.lastIndexOf('/'));\n                        var newPath =  pathToDirectory.length > 0 ? pathToDirectory + \"/\" + self.name() + extension : self.name() + extension;\n                        var hash = volumeId + btoa(unescape(encodeURIComponent(newPath)))\n                                .replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '.')\n                                .replace(/\\.+$/, '');\n\n                        var media = {\n                            id: self.media().id(),\n                            type: self.media().type(),\n                            content: tinyMCE.activeEditor.getContent({format : 'raw'}),\n                            path: pathToDirectory.length > 0 ? \"upload\" + newPath : \"upload/\" + newPath,\n                            name: self.name() + extension,\n                            hash: hash\n                        };\n\n                        if (self.media().name().substring(0, self.media().name().lastIndexOf('.')) == self.name()) self.update(media);\n                        else self.checkName(hash, media);\n                    }\n                });\n\n            };\n            self.createAnchors = function () {\n                self.updateAnchors();\n\n                var media = {\n                    id: self.media().id(),\n                    type: self.media().type(),\n                    content: tinyMCE.activeEditor.getContent({format : 'raw'}),\n                    path: self.media().path(),\n                    name: self.media().name(),\n                    hash: self.media().hash()\n                };\n\n                $ajaxpost({\n                    url: '/api/media/update',\n                    error: self.errors,\n                    data: JSON.stringify({media: media}),\n                    successCallback: function(){\n                        ko.utils.arrayForEach(self.anchorNames(), function (anchor) {\n                            $ajaxpost({\n                                url: '/api/mediable/create',\n                                error: self.errors,\n                                data: JSON.stringify({\n                                    mediable: {start: anchor, stop: null},\n                                    discipline: null,\n                                    mediaId: self.media().id(),\n                                    themeId: null}),\n                                successCallback: function () {\n                                    commonHelper.modal.open(self.modals.move);\n                                }\n                            });\n                        })\n                    }\n                });\n\n\n            };\n\n            self.checkName = function (hash, media) {\n                $ajaxget({\n                    url: '/api/media/hash/' + hash, // есть ли файл с таким же названием\n                    errors: self.errors,\n                    successCallback: function(data){\n                        if (data().length == 0)\n                            self.update(media);\n                        else {\n                            self.errors.show('Файл с таким названием уже существует!');\n                        }\n                    }\n                });\n            };\n            self.updateAnchors = function () {\n                var content = tinyMCE.activeEditor.getContent({format : 'raw'});\n                var anchors = content.match(/<a\\sid=\\\"(.*?)\"\\scontenteditable=\\\"false\"\\sclass=\\\"mce-item-anchor\\\">/g);\n                ko.utils.arrayForEach(anchors, function (anchor) {\n                    var htmlAnchor = $.parseHTML(anchor)[0];\n                    self.anchorNames.push(htmlAnchor.id);\n                });\n            };\n\n            self.fill = function (data) {\n                self.media()\n                    .id(data.id())\n                    .type(data.type())\n                    .content(data.content())\n                    .path(data.path())\n                    .name(data.name())\n                    .hash(data.hash());\n            };\n\n            self.get.media();\n            self.get.state();\n            self.initEditor();\n\n        };\n    };\n\n    ko.applyBindings(editorViewModel());\n});\n"]}