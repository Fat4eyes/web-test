{"version":3,"sources":["discipline.js"],"names":[],"mappingsfile":"student-discipline.js","sourcesContent":["$(document).ready(function(){\n    var disciplineTestsViewModel = function(){\n        return new function(){\n            var self = this;\n\n            initializeViewModel.call(self, {\n                page: menu.student.main\n            });\n\n            self.modals = {\n                messageBox: '#confirm-test-start-modal'\n            };\n\n            self.initial = {\n                tests: ko.observableArray([])\n            };\n\n            self.filter = {\n                test: ko.observable(''),\n                type: ko.observable(attemptsStatus.all),\n                clear: function(){\n                    self.filter.test('')\n                        .type(attemptsStatus.all);\n                }\n            };\n\n            self.current = {\n                discipline: {\n                    id: ko.observable(),\n                    name: ko.observable()\n                },\n                test: null,\n                tests: ko.computed(function() {\n                    var initial = self.initial.tests();\n                    var name = self.filter.test().toLowerCase();\n                    return ko.utils.arrayFilter(initial, function(item) {\n                        var type = false;\n                        switch(self.filter.type()){\n                            case attemptsStatus.all:\n                                type = true;\n                                break;\n                            case attemptsStatus.some:\n                                type = (item.attemptsLeft() > 0) && (item.attemptsMade() > 0);\n                                break;\n                            case attemptsStatus.left:\n                                type = item.attemptsMade() === 0;\n                                break;\n                            case attemptsStatus.none:\n                                type = item.attemptsLeft() === 0;\n                                break;\n                        }\n                        return item.test.subject().toLowerCase().includes(name) && type;\n                    });\n                })\n            };\n\n            self.actions = {\n                start: function(data){\n                    self.confirm.show({\n                        message: 'Вы уверены, что хотите пройти выбранный тест?',\n                        additionalHtml: '<p><span class=\"bold\">Предупреждение: </span>' +\n                        'Во время прохождения теста перезагрузка или переход на другую страницу приведёт к тому, ' +\n                        'что текущая попытка прохождения теста будет считаться израсходованной.</p>',\n                        approve: function(){\n                            commonHelper.cookies.create({\n                                testId: data.test.id(),\n                                testName: data.test.subject(),\n                                disciplineName: data.test.disciplineName(),\n                                testType: data.test.type()\n                            });\n                            window.location.href = '/test';\n                        }\n                    });\n                }\n            };\n\n            self.get = {\n                discipline: function(){\n                    var url = window.location.href;\n                    var id = +url.substr(url.lastIndexOf('/')+1);\n\n                    $ajaxget({\n                        url: '/api/disciplines/' + id,\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.current.discipline.id(data.id());\n                            self.current.discipline.name(data.name());\n                            self.get.tests();\n                        }\n                    });\n                },\n                tests: function(){\n                    $ajaxget({\n                        url: '/api/tests/showForStudent?discipline=' + self.current.discipline.id(),\n                        errors: self.errors,\n                        successCallback: function(data){\n                            self.initial.tests(data());\n                        }\n                    });\n                }\n            };\n            self.get.discipline();\n\n            return returnStandart.call(self);\n        };\n    };\n\n    ko.applyBindings(disciplineTestsViewModel());\n});"]}