{"version":3,"sources":["discipline.js"],"names":[],"mappingsfile":"student-discipline.js","sourcesContent":["$(document).ready(function(){\r\n    var disciplineTestsViewModel = function(){\r\n        return new function(){\r\n            var self = this;\r\n\r\n            initializeViewModel.call(self, {\r\n                page: menu.student.main\r\n            });\r\n\r\n            self.modals = {\r\n                messageBox: '#confirm-test-start-modal'\r\n            };\r\n\r\n            self.initial = {\r\n                tests: ko.observableArray([])\r\n            };\r\n\r\n            self.filter = {\r\n                test: ko.observable(''),\r\n                type: ko.observable(attemptsStatus.all),\r\n                clear: function(){\r\n                    self.filter.test('')\r\n                        .type(attemptsStatus.all);\r\n                }\r\n            };\r\n\r\n            self.current = {\r\n                discipline: {\r\n                    id: ko.observable(),\r\n                    name: ko.observable()\r\n                },\r\n                test: null,\r\n                tests: ko.computed(function() {\r\n                    var initial = self.initial.tests();\r\n                    var name = self.filter.test().toLowerCase();\r\n                    return ko.utils.arrayFilter(initial, function(item) {\r\n                        var type = false;\r\n                        switch(self.filter.type()){\r\n                            case attemptsStatus.all:\r\n                                type = true;\r\n                                break;\r\n                            case attemptsStatus.some:\r\n                                type = (item.attemptsLeft() > 0) && (item.attemptsMade() > 0);\r\n                                break;\r\n                            case attemptsStatus.left:\r\n                                type = item.attemptsMade() === 0;\r\n                                break;\r\n                            case attemptsStatus.none:\r\n                                type = item.attemptsLeft() === 0;\r\n                                break;\r\n                        }\r\n                        return item.test.subject().toLowerCase().includes(name) && type;\r\n                    });\r\n                })\r\n            };\r\n\r\n            self.actions = {\r\n                start: function(data){\r\n                    self.confirm.show({\r\n                        message: 'Вы уверены, что хотите пройти выбранный тест?',\r\n                        additionalHtml: '<p><span class=\"bold\">Предупреждение: </span>' +\r\n                        'Во время прохождения теста перезагрузка или переход на другую страницу приведёт к тому, ' +\r\n                        'что текущая попытка прохождения теста будет считаться израсходованной.</p>',\r\n                        approve: function(){\r\n                            commonHelper.cookies.create({\r\n                                testId: data.test.id(),\r\n                                testName: data.test.subject(),\r\n                                disciplineName: data.test.disciplineName(),\r\n                                testType: data.test.type()\r\n                            });\r\n                            window.location.href = '/test';\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n            self.get = {\r\n                discipline: function(){\r\n                    var url = window.location.href;\r\n                    var id = +url.substr(url.lastIndexOf('/')+1);\r\n\r\n                    $ajaxget({\r\n                        url: '/api/disciplines/' + id,\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.current.discipline.id(data.id());\r\n                            self.current.discipline.name(data.name());\r\n                            self.get.tests();\r\n                        }\r\n                    });\r\n                },\r\n                tests: function(){\r\n                    $ajaxget({\r\n                        url: '/api/tests/showForStudent?discipline=' + self.current.discipline.id(),\r\n                        errors: self.errors,\r\n                        successCallback: function(data){\r\n                            self.initial.tests(data());\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            self.get.discipline();\r\n\r\n            return returnStandart.call(self);\r\n        };\r\n    };\r\n\r\n    ko.applyBindings(disciplineTestsViewModel());\r\n});"]}